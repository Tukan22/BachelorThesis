AR1_RV_fit = list()
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
stockn
stockn = "AAPL"
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
HAR_fit = list()
HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
HARAS_fit = list()
HARS_fit = list()
HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
HARSK_fit = list()
HARSK_fit[[stockn]] <-lm(RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
for(stockn in stocks$stockname){
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
}
for(stockn in stocks$stockname){
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
}
HARSK_fit[["AAL"]]$residuals
residuals(HARSK_fit[["AAL"]])
residuals(AR1_RV_fit[["AAL"]])
residuals(HAR_fit[["AAL"]])
residuals(HARAS_fit[["AAL"]])
residuals(HARSK_fit[["AAL"]])
stocks$JBp_val = rep(NA, times = nrow(stocks))
df <- subset(df, select = -"JBp_val")
rem = "JBp_val"
df <- subset(df, select = -rem)
stocks <- subset(stocks, select = -rem)
stocks <- subset(stocks, select = -"JBp_val")
which(names(stocks))
names(stocks)
which(names(stocks) == "JBp_val" )
stocks <- subset(stocks, select = -which(names(stocks) == "JBp_val" ) )
stocks$JBpval_AR1_RV_fit = rep(NA, times = nrow(stocks))
stocks$JBpval_HAR_fit = rep(NA, times = nrow(stocks))
stocks$JBpval_HARAS_fit = rep(NA, times = nrow(stocks))
stocks$JBpval_HARS_fit = rep(NA, times = nrow(stocks))
stocks$JBpval_HARSK_fit = rep(NA, times = nrow(stocks))
jarque.bera.test(residuals(AR1_RV_fit[["AAL"]]))
names(jarque.bera.test(residuals(AR1_RV_fit[["AAL"]])))
jarque.bera.test(residuals(AR1_RV_fit[["AAL"]]))$p.value
jarque.bera.test(residuals(AR1_RV_fit[["AAPL"]]))$p.value
jarque.bera.test(residuals(AR1_RV_fit[["AAPL"]]))
jarque.bera.test(residuals(AR1_RV_fit[["AAPL"]]))$statistic
where(stocks$stockname == "AAL")
which(stocks$stockname == "AAL")
which(stocks$stockname == "AAPL")
which(stocks$stockname =="AAPL")
for(stockn in stocks$stockname){
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
stocks[which(stocks$stockname ==stockn),"JBpval_AR1_RV_fit"]= jarque.bera.test(residuals(AR1_RV_fit[[stockn]]))$statistic
HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
}
for(stockn in stocks$stockname){
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
stocks[which(stocks$stockname ==stockn),"JBpval_AR1_RV_fit"]= jarque.bera.test(residuals(AR1_RV_fit[[stockn]]))$p.val
HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HAR_fit"]= jarque.bera.test(residuals(HAR_fit[[stockn]]))$p.val
HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARAS_fit"]= jarque.bera.test(residuals(HARAS_fit[[stockn]]))$p.val
HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARS_fit"]= jarque.bera.test(residuals(HARS_fit[[stockn]]))$p.val
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARSK_fit"]= jarque.bera.test(residuals(HARSK_fit[[stockn]]))$p.val
}
head(stocks)
for(stockn in stocks$stockname){
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
stocks[which(stocks$stockname ==stockn),"JBpval_AR1_RV_fit"]= jarque.bera.test(residuals(AR1_RV_fit[[stockn]]))$statistic
HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HAR_fit"]= jarque.bera.test(residuals(HAR_fit[[stockn]]))$statistic
HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARAS_fit"]= jarque.bera.test(residuals(HARAS_fit[[stockn]]))$statistic
HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARS_fit"]= jarque.bera.test(residuals(HARS_fit[[stockn]]))$statistic
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARSK_fit"]= jarque.bera.test(residuals(HARSK_fit[[stockn]]))$statistic
}
head(stocks)
for(stockn in stocks$stockname){
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
stocks[which(stocks$stockname ==stockn),"JBpval_AR1_RV_fit"]= jarque.bera.test(residuals(AR1_RV_fit[[stockn]]))$p.val
HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HAR_fit"]= jarque.bera.test(residuals(HAR_fit[[stockn]]))$p.val
HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARAS_fit"]= jarque.bera.test(residuals(HARAS_fit[[stockn]]))$p.val
HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARS_fit"]= jarque.bera.test(residuals(HARS_fit[[stockn]]))$p.val
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARSK_fit"]= jarque.bera.test(residuals(HARSK_fit[[stockn]]))$p.val
}
RGARCH_fit = list()
for(stockn in stocks$stockname){
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
stocks[which(stocks$stockname ==stockn),"JBpval_AR1_RV_fit"]= jarque.bera.test(residuals(AR1_RV_fit[[stockn]]))$p.val
HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HAR_fit"]= jarque.bera.test(residuals(HAR_fit[[stockn]]))$p.val
HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARAS_fit"]= jarque.bera.test(residuals(HARAS_fit[[stockn]]))$p.val
HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARS_fit"]= jarque.bera.test(residuals(HARS_fit[[stockn]]))$p.val
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARSK_fit"]= jarque.bera.test(residuals(HARSK_fit[[stockn]]))$p.val
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)),
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std")
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = stocks[[stockn]]$ret, realizedVol= stocks[[stockn]]$RV)
}
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)),
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std")
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = stocks[[stockn]]$ret, realizedVol= stocks[[stockn]]$RV)
stocks[[stockn]]$RV
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV)
RGARCH_fit[[stockn]]
jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$p.val
jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$statistic
stocks$JBpval_RGARCH_fit =rep(NA, times = nrow(stocks))
stocks$JBpval_ARMAGARCH_fit =rep(NA, times = nrow(stocks))
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV)
jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$statistic
jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$statistic
stocks$JBpval_ARMAGARCH_fit = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$p.value
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, abc$ret, realizedVol = abc$RV)
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV)
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV)
ARMAGARCH_fit = list()
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV)
stocks$JBpval_ARMAGARCH_fit = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$p.value
stocks$JBpval_ARMAGARCH_fit = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistics
stocks$JBpval_ARMAGARCH_fit
stocks$JBpval_ARMAGARCH_fit
stocks$JBpval_RGARCH_fit =rep(NA, times = nrow(stocks))
stocks$JBpval_ARMAGARCH_fit =rep(NA, times = nrow(stocks))
stocks$JBpval_ARMAGARCH_fit = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistics
stocks$JBpval_ARMAGARCH_fit
stocks$JBpval_RGARCH_fit
stocks$JBpval_RGARCH_fit =rep(NA, times = nrow(stocks))
stocks$JBpval_ARMAGARCH_fit =rep(NA, times = nrow(stocks))
stocks$JBpval_RGARCH_fit =rep(NA, times = nrow(stocks))
stocks$JBpval_ARMAGARCH_fit =rep(NA, times = nrow(stocks))
jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistics
residuals(RGARCH_fit[[stockn]]))
residuals(RGARCH_fit[[stockn]])
residuals(ARMAGARCH_fit[[stockn]])
jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))
jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistics
names(jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]])))
stocks$JBpval_ARMAGARCH_fit = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistic
stocks$JBpval_ARMAGARCH_fit
stocks$JBpval_RGARCH_fit
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV)
stocks$JBpval_RGARCH_fit
stocks[which(stocks$stockname ==stockn),"JBpval_HARSK_fit"] = jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$p.value
stocks[which(stocks$stockname ==stockn),"JBpval_HARSK_fit"] = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistic
stocks
stocks$JBpval_RGARCH_fit =rep(NA, times = nrow(stocks))
stocks$JBpval_ARMAGARCH_fit =rep(NA, times = nrow(stocks))
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_HARSK_fit"] = jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$p.value
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_HARSK_fit"] = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistic
head(stocks)
stocks$JBpval_AR1_RV_fit = rep(NA, times = nrow(stocks))
stocks$JBpval_HAR_fit = rep(NA, times = nrow(stocks))
stocks$JBpval_HARAS_fit = rep(NA, times = nrow(stocks))
stocks$JBpval_HARS_fit = rep(NA, times = nrow(stocks))
stocks$JBpval_HARSK_fit = rep(NA, times = nrow(stocks))
stocks$JBpval_RGARCH_fit =rep(NA, times = nrow(stocks))
stocks$JBpval_ARMAGARCH_fit =rep(NA, times = nrow(stocks))
for(stockn in stocks$stockname){
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
stocks[which(stocks$stockname ==stockn),"JBpval_AR1_RV_fit"]= jarque.bera.test(residuals(AR1_RV_fit[[stockn]]))$p.val
HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HAR_fit"]= jarque.bera.test(residuals(HAR_fit[[stockn]]))$p.val
HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARAS_fit"]= jarque.bera.test(residuals(HARAS_fit[[stockn]]))$p.val
HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARS_fit"]= jarque.bera.test(residuals(HARS_fit[[stockn]]))$p.val
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARSK_fit"]= jarque.bera.test(residuals(HARSK_fit[[stockn]]))$p.val
}
head(stocks)
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_HARSK_fit"] = jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$p.value
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_HARSK_fit"] = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistic
head(stocks)
which(stocks$stockname ==stockn)
stockn
tail(stocks)
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_RGARCH_fit"] = jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$p.value
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_ARMAGARCH_fit"] = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistic
tail(stocks)
jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistic
for(stockn in stocks$stockname){
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
stocks[which(stocks$stockname ==stockn),"JBpval_AR1_RV_fit"]= jarque.bera.test(residuals(AR1_RV_fit[[stockn]]))$p.val
HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HAR_fit"]= jarque.bera.test(residuals(HAR_fit[[stockn]]))$p.val
HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARAS_fit"]= jarque.bera.test(residuals(HARAS_fit[[stockn]]))$p.val
HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARS_fit"]= jarque.bera.test(residuals(HARS_fit[[stockn]]))$p.val
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARSK_fit"]= jarque.bera.test(residuals(HARSK_fit[[stockn]]))$p.val
}
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_RGARCH_fit"] = jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$p.value
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_ARMAGARCH_fit"] = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistic
tail(stocks)
stocks[which(stocks$stockname ==stockn),"JBpval_RGARCH_fit"] = jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$statistic
tail(stocks)
for(stockn in stocks$stockname){
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
stocks[which(stocks$stockname ==stockn),"JBpval_AR1_RV_fit"]= jarque.bera.test(residuals(AR1_RV_fit[[stockn]]))$p.val
HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HAR_fit"]= jarque.bera.test(residuals(HAR_fit[[stockn]]))$p.val
HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARAS_fit"]= jarque.bera.test(residuals(HARAS_fit[[stockn]]))$p.val
HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARS_fit"]= jarque.bera.test(residuals(HARS_fit[[stockn]]))$p.val
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARSK_fit"]= jarque.bera.test(residuals(HARSK_fit[[stockn]]))$p.val
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_RGARCH_fit"] = jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$statistic
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_ARMAGARCH_fit"] = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistic
}
for(stockn in stocks$stockname){
print(stockn)
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_RGARCH_fit"] = jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$statistic
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_ARMAGARCH_fit"] = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistic
}
counter = 1
for(stockn in stocks$stockname){
print(stockn)
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_RGARCH_fit"] = jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$statistic
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_ARMAGARCH_fit"] = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistic
counter = counter + 1
}
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_RGARCH_fit"] = jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$statistic
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_ARMAGARCH_fit"] = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistic
counter = counter + 1
}
head(stocks, 25)
counter = 1
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_ARMAGARCH_fit"] = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistic
counter = counter + 1
}
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_RGARCH_fit"] = jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$statistic
counter = counter + 1
}
counter = 1
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV)
stocks[which(stocks$stockname ==stockn),"JBpval_RGARCH_fit"] = jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$statistic
counter = counter + 1
}
head(stocks, 25)
counter = 1
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV, solver ='hybrid')
stocks[which(stocks$stockname ==stockn),"JBpval_ARMAGARCH_fit"] = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistic
counter = counter + 1
}
counter = 1
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV, solver ='hybrid')
stocks[which(stocks$stockname ==stockn),"JBpval_RGARCH_fit"] = jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$statistic
counter = counter + 1
}
system.time()
System.time()
Sys.time()
end = Sys.time()
start_time = Sys.time()
end = Sys.time()
print(end-start)
end_time = Sys.time()
print(end_time-start_time)
counter = 1
counter = 1
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
print("   AR-RV:")
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
stocks[which(stocks$stockname ==stockn),"JBpval_AR1_RV_fit"]= jarque.bera.test(residuals(AR1_RV_fit[[stockn]]))$p.val
print("   HAR:")
HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HAR_fit"]= jarque.bera.test(residuals(HAR_fit[[stockn]]))$p.val
print("   HAS_AS:")
HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARAS_fit"]= jarque.bera.test(residuals(HARAS_fit[[stockn]]))$p.val
print("   HARS:")
HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARS_fit"]= jarque.bera.test(residuals(HARS_fit[[stockn]]))$p.val
print("   HARSK:")
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARSK_fit"]= jarque.bera.test(residuals(HARSK_fit[[stockn]]))$p.val
print("   ARMAGARCH:")
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV, solver ='hybrid')
stocks[which(stocks$stockname ==stockn),"JBpval_ARMAGARCH_fit"] = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistic
print("   RGARCH:")
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV, solver ='hybrid')
stocks[which(stocks$stockname ==stockn),"JBpval_RGARCH_fit"] = jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$statistic
counter = counter + 1
}
end_time = Sys.time()
print(end_time-start_time)
for(stockn in stocks$stockname){
stocks[which(stocks$stockname ==stockn),"JBpval_ARMAGARCH_fit"] = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$statistic
stocks[which(stocks$stockname ==stockn),"JBpval_RGARCH_fit"] = jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$p.value
}
head(stocks)
for(stockn in stocks$stockname){
stocks[which(stocks$stockname ==stockn),"JBpval_ARMAGARCH_fit"] = jarque.bera.test(residuals(ARMAGARCH_fit[[stockn]]))$p.value
stocks[which(stocks$stockname ==stockn),"JBpval_RGARCH_fit"] = jarque.bera.test(residuals(RGARCH_fit[[stockn]]))$p.value
}
head(stocks)
varstokeep = c("allstocks", "HARmeasures","stocks", "varstokeep")
varstokeep = c(varstokeep, "hi")
varstokeep
varstokeep = c("allstocks", "HARmeasures","stocks", "varstokeep")
varstokeep
varstokeep = c(varstokeep, "AR1_RV_fit", "ARMAGARCH_fit", "HAR_fit", "HARAS_fit", "HARS_fit", "HARSk_fit", "RGARCH_fit")
varstokeep = c(varstokeep, "AR1_RV_fit", "ARMAGARCH_fit", "HAR_fit", "HARAS_fit", "HARS_fit", "HARSk_fit", "RGARCH_fit")
rm(list=setdiff(ls(), varstokeep))
save.image("Data/stocks.RData")
load("Data/stocks.RData")
varstokeep1 = c("allstocks", "HARmeasures","stocks", "varstokeep")
varstokeep1 = c("allstocks", "HARmeasures","stocks", "varstokeep")
rm(list=setdiff(ls(), varstokeep1))
save.image("Data/stocks.RData1")
save.image("Data/stocks1.RData")
varstokeep2 = c("AR1_RV_fit", "ARMAGARCH_fit", "HAR_fit", "HARAS_fit", "HARS_fit", "HARSk_fit", "RGARCH_fit")
load("Data/stocks.RData")
save.image("Data2/stocks.RData")
save.image("Data/stocks2.RData")
varstokeep2 = c("HARAS_fit")
rm(list=setdiff(ls(), varstokeep))
varstokeep2 = c("HARAS_fit")
rm(list=setdiff(ls(), varstokeep2))
save.image("Data/stocks2.RData")
load("Data/stocks.RData")
save(allstocks, file = "Data/allstocks.Rdata")
ls()
varstokeep
ls()
HARSK_fit = list()
stocks$JBpval_HARSK_fit = rep(NA, times = nrow(stocks))
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
print("   HARSK:")
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARSK_fit"]= jarque.bera.test(residuals(HARSK_fit[[stockn]]))$p.val
counter = counter + 1
}
counter = 1
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
print("   HARSK:")
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARSK_fit"]= jarque.bera.test(residuals(HARSK_fit[[stockn]]))$p.val
counter = counter + 1
}
library(graphics)
library(RColorBrewer)
library(ggplot2)
library(tseries)
library(dplyr)
library(aod)
library(stargazer)
library(xtable)
library(stats)
library(zoo)
library(forecast)
library(rugarch)
library(xts)
library(highfrequency)
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
print("   HARSK:")
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
stocks[which(stocks$stockname ==stockn),"JBpval_HARSK_fit"]= jarque.bera.test(residuals(HARSK_fit[[stockn]]))$p.val
counter = counter + 1
}
ls()
varstokeep
save(allstocks, file = "Data/allstocks.Rdata")
save(AR1_RV_fit, file = "Data/AR1_RV_fit.Rdata")
save(ARMAGARCH_fit, file = "Data/ARMAGARCH_fit.Rdata")
save(HAR_fit, file = "Data/HAR_fit.Rdata")
save(HARAS_fit, file = "Data/HARAS_fit.Rdata")
save(HARmeasures, file = "Data/HARmeasures.Rdata")
save(HARS_fit, file = "Data/HARS_fit.Rdata")
save(HARS_fit, file = "Data/HARSK_fit.Rdata")
save(RGARCH_fit, file = "Data/RGARCH_fit.Rdata")
save(stocks, file = "Data/stocks.Rdata")
save(varstokeep, file = "Data/varstokeep.Rdata")
rm(ls())
rm(list = ls())
list.files("Data")
class(list.files("Data"))
list.files("Data"))[1]
list.files("Data"))
list.files("Data")[1]
for(filename in list.files("Data")){
load(paste("Data/", filename, sep = ""))
}
setdiff(list.files("Data"), list.dirs(recursive = FALSE, full.names = FALSE))
list.files("Data")
setdiff(list.files("Data"), list.dirs("Data", recursive = FALSE, full.names = FALSE))
rm(list = ls())
for(filename in setdiff(list.files("Data"), list.dirs("Data", recursive = FALSE, full.names = FALSE))){
load(paste("Data/", filename, sep = ""))
}
rm(list = c("varstokeep"))
rm()
rm(list = ls())
for(filename in setdiff(list.files("Data"), list.dirs("Data", recursive = FALSE, full.names = FALSE))){
load(paste("Data/", filename, sep = ""))
}
rm(list = c("filename"))
