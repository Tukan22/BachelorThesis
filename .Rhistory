TT[[stockn]] <- nrow(data_aux[[stockn]])
RV_5[[stockn]] <- unlist(lapply(lapply(1:(TT[[stockn]] - 4), function (x) {return(data_aux[[stockn]]$RV[x:(x + 4)])}), mean))
RV_22[[stockn]] <- unlist(lapply(lapply(1:(TT[[stockn]] - 21), function (x) {return(data_aux[[stockn]]$RV[x:(x + 21)])}), mean))
T_5[[stockn]] <- length(RV_5[[stockn]])
T_22[[stockn]] <- length(RV_22[[stockn]])
HAR_DATA[[stockn]] <- data.frame(data_aux[[stockn]]$RV[23:TT[[stockn]]],
data_aux[[stockn]]$RSp[22:(TT[[stockn]] - 1)],
data_aux[[stockn]]$RSm[22:(TT[[stockn]] - 1)],
RV_5[[stockn]][18:(T_5[[stockn]] - 1)],
RV_22[[stockn]][1:(T_22[[stockn]] - 1)],
data_aux[[stockn]]$RKu[22:(TT[[stockn]] - 1)],
data_aux[[stockn]]$RSk[22:(TT[[stockn]] - 1)])
colnames(HAR_DATA[[stockn]]) <- c("RV","RV_p","RV_n","RV_5","RV_22", "RK", "RS")
counter = counter + 1
}
stocks_to_remove = c(which(stocks$stockname == "LIN"))
if(length(stocks_to_remove)==0 ) {stocks_to_remove = -seq(from = 1, to = nrow(stocks))}
allstocks = allstocks[-stocks_to_remove]
stocks = stocks[-stocks_to_remove,]
nrow(stocks)
stocks$stockname
t_df_names = c("AAL","AAPL","ABBV","ACN","ADBE","AMAT","AMD","AMGN","AMZN","ANET","AVGO","BA","BAC","BKNG","C","CAT","CMCSA","CMG","COP","COST","CRM","CSCO","CVS","CVX","DIS","EMR","FCX","FTNT","GE","GME","GOOG","GS","HD","HES","IBM","INTC","JNJ","JPM","KO","LRCX","MA","MCD","MCHP","MELI","META","MRK","MSFT","MSTR","MU","NEE","NFLX","NKE","NOW","NVDA","NXPI","ORCL","PANW","PEP","PFE","PG","PYPL","QCOM","SBUX","SHOP","SMCI","SO","SPGI","SYK","TJX","TMO","TMUS","TSN","TXN","UNH","V","VRTX","WDAY","WFC","WMT","XOM")
t_df_numbers = c(0.1,0.1,0.1,1.5,0.1,0.1,0.1,0.1,0.1,0.1,1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,1,0.1,1.5,0.1,0.1,0.1,3,0.1,0.1,0.1,0.1,0.1,5,0.1,0.1,0.1,1,0.1,1,1,0.1,0.1,0.1,1,1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,1,2.5,1.5,0.1,1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1)
stocks$t_df_start = rep(NA, times = nrow(stocks))
for(stockn in stocks$stockname) {
stocks$t_df_start[which(stocks$stockname == stockn)] = t_df_numbers[which(stocks$stockname == stockn)]
}
stocks$t_df_start
AR1_RV_fit = list()
HAR_fit = list()
HARAS_fit = list()
HARS_fit = list()
HARSK_fit = list()
RGARCH_fit = list()
ARMAGARCH_fit = list()
ARMA_fit = list()
RGARCH = list()
HARmeasures = list()
# Compute values for realized HAR models
for(stockn in stocks$stockname){
TT <- length(allstocks[[stockn]]$RV)
RV_0 <- as.numeric(allstocks[[stockn]]$RV[23:TT])
RV_1 <- as.numeric(allstocks[[stockn]]$RV[22:(TT - 1)])
RV_5 <- unlist(lapply(lapply(1:(TT - 4), function (t) {return(RV_0[t:(t + 4)])}), mean))
T_5 <- length(RV_5)
RV_5 <- RV_5[18:(T_5 - 1)]
RV_22 <- unlist(lapply(lapply(1:(TT - 21), function (t) {return(RV_0[t:(t + 21)])}), mean))
T_22 <- length(RV_22)
RV_22 <- RV_22[1:(T_22 - 1)]
RV_n <- as.numeric(allstocks[[stockn]]$RSm[22:(TT - 1)])
RV_p <- as.numeric(allstocks[[stockn]]$RSp[22:(TT - 1)])
RK <- as.numeric(allstocks[[stockn]]$RKu[22:(TT - 1)])     # TODO: What is this?!?
RS <- as.numeric(allstocks[[stockn]]$RSk[22:(TT - 1)])     # TODO: What is this?!?
output = data.frame(RV_0, RV_1, RV_5, RV_22, RV_n, RV_p, RK, RS)
HARmeasures[[stockn]] = output
}
start_time = Sys.time()
counter = 1
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV, solver ='hybrid')
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(1, 1)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV, solver ='hybrid')
counter = counter + 1
ARMA_fit[[stockn]] = arima(allstocks[[stockn]]$ret, order = c(1, 0, 1))
}
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV, solver ='hybrid')
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(1, 1)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV, solver ='hybrid')
counter = counter + 1
ARMA_fit[[stockn]] = arima(allstocks[[stockn]]$ret, order = c(1, 0, 1))
}
start_time = Sys.time()
counter = 1
for(stockn in c("GS")){
print(paste(counter,": ", stockn, sep = ""))
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV, solver ='hybrid')
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(1, 1)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV, solver ='hybrid')
counter = counter + 1
ARMA_fit[[stockn]] = arima(allstocks[[stockn]]$ret, order = c(1, 0, 1))
}
end_time = Sys.time()
print(end_time-start_time)
start_time = Sys.time()
counter = 1
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV, solver ='hybrid')
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(1, 1)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV, solver ='hybrid')
counter = counter + 1
ARMA_fit[[stockn]] = arima(allstocks[[stockn]]$ret, order = c(1, 0, 1))
}
end_time = Sys.time()
print(end_time-start_time)
##########################
######### AR1_RV #########
##########################
AR1_RV_fc_r = list()
AR1_RV_fc_e = list()
# Runs approximately 11 minutes
start_time = Sys.time()
print(start_time)
counter = 1
for(stockn in stocks$stockname){
# for(stockn in c("ANET")){
w_l = stocks$w_l[which(stocks$stockname == stockn)]    # TODO set better numbers
n_for = stocks$n_for[which(stocks$stockname == stockn)] # TODO set better numbers
print(paste(counter, ": ", stockn, sep = ""))
print("   Rolling")
# AR1-RV
# rolling
AR1_RV_fc_r[[stockn]]<-lapply(1:n_for, function(x) arima(allstocks[[stockn]]$RV[x:(w_l+x),],order=c(1,0,0)))   # TODO arima order
AR1_RV_fc_r[[stockn]]<-sapply(1:n_for, function(x) predict(AR1_RV_fc_r[[stockn]][[x]],n.ahead = 1)$pred)
AR1_RV_fc_r[[stockn]]<-xts(AR1_RV_fc_r[[stockn]],order.by=index(allstocks[[stockn]][(w_l+2):(w_l+1+n_for),]))
nrow(allstocks[[stockn]])
print("   Expanding")
# expanding
AR1_RV_fc_e[[stockn]] <- lapply(1:n_for, function(x) arima(allstocks[[stockn]]$RV[1:(w_l+x),],order=c(1,0,0))) # TODO arima order
AR1_RV_fc_e[[stockn]] <- sapply(1:n_for, function(x) predict(AR1_RV_fc_e[[stockn]][[x]],n.ahead = 1)$pred)
AR1_RV_fc_e[[stockn]] <- xts(AR1_RV_fc_e[[stockn]],order.by=index(allstocks[[stockn]][(w_l+2):(w_l+1+n_for),]))
counter = counter + 1
}
AR1_RV_fc_r = lapply(AR1_RV_fc_r, sqrt)   # TODO TBC if correct
AR1_RV_fc_e = lapply(AR1_RV_fc_e, sqrt)   # TODO TBC if correct
# AR1_RV_fc_r = lapply(AR1_RV_fc_r, function(x) {ifelse(is.na(x),0,x)})
# AR1_RV_fc_e = lapply(AR1_RV_fc_e, function(x) {ifelse(is.na(x),0,x)})
AR1_RV_fc_r = lapply(AR1_RV_fc_r, function(x) {ifelse(x<0,0,x)})
AR1_RV_fc_e = lapply(AR1_RV_fc_e, function(x) {ifelse(x<0,0,x)})
save(AR1_RV_fc_r, file = "Data/AR1_RV_fc_r.Rdata")
save(AR1_RV_fc_e, file = "Data/AR1_RV_fc_e.Rdata")
end_time = Sys.time()
print(end_time-start_time)
AR1_RV_fc_e
head(AR1_RV_fc_e)
head(AR1_RV_fc_e[["AAPL"]])
HAR_fc_r = list()
HAR_fc_e = list()
# Runs approximately 12 minutes
start_time = Sys.time()
print(start_time)
counter = 1
for(stockn in stocks$stockname){
w_l = stocks$w_l[which(stocks$stockname == stockn)]    # TODO set better numbers
n_for = stocks$n_for[which(stocks$stockname == stockn)] # TODO set better numbers
print(paste(counter, ": ", stockn, sep = ""))
print("   Rolling")
# HAR
# rolling
HAR_fc_r[[stockn]]<-lapply(1:n_for, function(x) HARmodel(data = allstocks[[stockn]]$RV[x:(w_l+x),] , periods = c(1,5,22),
type = "HAR", h = 1, transform = NULL, inputType = "RM"))
HAR_fc_r[[stockn]]<-sapply(1:n_for, function (x) predict(HAR_fc_r[[stockn]][[x]]))
HAR_fc_r[[stockn]]<-xts(HAR_fc_r[[stockn]],order.by = index(allstocks[[stockn]]$ret[(w_l+2):(w_l+1+n_for),]))
print("   Expanding")
# expanding
HAR_fc_e[[stockn]] <- lapply(1:n_for, function(x) HARmodel(data = allstocks[[stockn]]$RV[1:(w_l+x),] ,
periods = c(1,5,22), RVest = c("rCov"),
type = "HAR", h = 1, transform = NULL,
inputType = "RM"))
HAR_fc_e[[stockn]] <- sapply(1:n_for, function (x) predict(HAR_fc_e[[stockn]][[x]]))
HAR_fc_e[[stockn]] <- xts(HAR_fc_e[[stockn]],order.by = index(allstocks[[stockn]][(w_l+2):(w_l+1+n_for),]))
counter = counter + 1
}
HAR_fc_r = lapply(HAR_fc_r, function(x) {ifelse(x<0,0,x)})
HAR_fc_e = lapply(HAR_fc_e, function(x) {ifelse(x<0,0,x)})
# HAR_fc_r = lapply(HAR_fc_r, function(x) {ifelse(is.na(x),0,x)})
# HAR_fc_e = lapply(HAR_fc_e, function(x) {ifelse(is.na(x),0,x)})
HAR_fc_r = lapply(HAR_fc_r, sqrt)
HAR_fc_e = lapply(HAR_fc_e, sqrt)
save(HAR_fc_r, file = "Data/HAR_fc_r.Rdata")
save(HAR_fc_e, file = "Data/HAR_fc_e.Rdata")
end_time = Sys.time()
print(end_time-start_time)
HAR_AS_fc_r = list()
HAR_AS_fc_e = list()
# HAR-AS
counter = 1
for(stockn in stocks$stockname){
print(paste(counter, ": ", stockn, sep = ""))
print("   Rolling")
n_for = stocks[which(stocks$stockname == stockn),"n_for"]
w_l = stocks[which(stocks$stockname == stockn),"w_l"]
HAR_AS_fc_r[[stockn]] <- rep(NA, n_for)
for (i in 0:(n_for - 1)) {
temp <- HAR_DATA[[stockn]][1+ i:(w_l + i - 22), ] %>% ts()
fc_data <- HAR_DATA[[stockn]][w_l + i + 1 - 22, -1]
model <- tslm(RV ~ RV_n + RV_p + RV_5 + RV_22, data = temp)
HAR_AS_fc_r[[stockn]][i + 1] <- predict(model, newdata=fc_data)
}
HAR_AS_fc_r[[stockn]]<-xts(HAR_AS_fc_r[[stockn]],order.by = index(allstocks[[stockn]]$ret[(w_l+1):(w_l+n_for)]))
print("   Expanding")
HAR_AS_fc_e[[stockn]] <- rep(NA, n_for)
for (i in 0:(n_for - 1)) {
temp <- HAR_DATA[[stockn]][1:(w_l + i - 22), ] %>% ts()
fc_data <- HAR_DATA[[stockn]][w_l + i + 1 - 22, -1]
model <- tslm(RV ~ RV_n + RV_p + RV_5 + RV_22, data = temp)
HAR_AS_fc_e[[stockn]][i + 1] <- predict(model, newdata=fc_data)
}
HAR_AS_fc_e[[stockn]]<-xts(HAR_AS_fc_e[[stockn]],order.by = index(allstocks[[stockn]]$ret[(w_l+1):(w_l+n_for)]))
counter = counter + 1
}
HAR_AS_fc_r = lapply(HAR_AS_fc_r, function(x) {ifelse(x<0,0,x)})
HAR_AS_fc_e = lapply(HAR_AS_fc_e, function(x) {ifelse(x<0,0,x)})
# HAR_AS_fc_r = lapply(HAR_AS_fc_r, function(x) {ifelse(is.na(x),0,x)})
# HAR_AS_fc_e = lapply(HAR_AS_fc_e, function(x) {ifelse(is.na(x),0,x)})
HAR_AS_fc_r = lapply(HAR_AS_fc_r, sqrt)
HAR_AS_fc_e = lapply(HAR_AS_fc_e, sqrt)
save(HAR_AS_fc_r, file = "Data/HAR_AS_fc_r.Rdata")
save(HAR_AS_fc_e, file = "Data/HAR_AS_fc_e.Rdata")
start_time = Sys.time()
HAR_RS_fc_r = list()
HAR_RS_fc_e = list()
#HAR-RS
counter = 1
for(stockn in stocks$stockname){
print(paste(counter, ": ", stockn, sep = ""))
print("   Rolling")
n_for = stocks[which(stocks$stockname == stockn),"n_for"]
w_l = stocks[which(stocks$stockname == stockn),"w_l"]
HAR_RS_fc_r[[stockn]] <- rep(NA, n_for)
for (i in 0:(n_for - 1)) {
temp <- HAR_DATA[[stockn]][1+ i:(w_l + i - 22), ] %>% ts()
fc_data <- HAR_DATA[[stockn]][w_l + i + 1 - 22, -1]
model <- tslm(RV ~ RS + RV_5 + RV_22, data = temp)
HAR_RS_fc_r[[stockn]][i + 1] <- predict(model, newdata=fc_data)
}
HAR_RS_fc_r[[stockn]]<-xts(HAR_RS_fc_r[[stockn]],order.by = index(allstocks[[stockn]]$ret[(w_l+1):(w_l+n_for)]))
print("   Expanding")
HAR_RS_fc_e[[stockn]] <- rep(NA, n_for)
for (i in 0:(n_for - 1)) {
temp <- HAR_DATA[[stockn]][1:(w_l + i - 22), ] %>% ts()
fc_data <- HAR_DATA[[stockn]][w_l + i + 1 - 22, -1]
model <- tslm(RV ~ RS + RV_5 + RV_22, data = temp)
HAR_RS_fc_e[[stockn]][i + 1] <- predict(model, newdata=fc_data)
}
HAR_RS_fc_e[[stockn]]<-xts(HAR_RS_fc_e[[stockn]],order.by = index(allstocks[[stockn]]$ret[(w_l+1):(w_l+n_for)]))
counter = counter + 1
}
HAR_RS_fc_r = lapply(HAR_RS_fc_r, function(x) {ifelse(x<0,0,x)})
HAR_RS_fc_e = lapply(HAR_RS_fc_e, function(x) {ifelse(x<0,0,x)})
# HAR_RS_fc_r = lapply(HAR_RS_fc_r, function(x) {ifelse(is.na(x),0,x)})
# HAR_RS_fc_e = lapply(HAR_RS_fc_e, function(x) {ifelse(is.na(x),0,x)})
HAR_RS_fc_r = lapply(HAR_RS_fc_r, sqrt)
HAR_RS_fc_e = lapply(HAR_RS_fc_e, sqrt)
save(HAR_RS_fc_r, file = "Data/HAR_RS_fc_r.Rdata")
save(HAR_RS_fc_e, file = "Data/HAR_RS_fc_e.Rdata")
end_time = Sys.time()
print(end_time-start_time)
HAR_RSRK_fc_r = list()
HAR_RSRK_fc_e  = list()
# HAR-RS-RK
counter = 1
for(stockn in stocks$stockname){
print(paste(counter, ": ", stockn, sep = ""))
print("   Rolling")
n_for = stocks[which(stocks$stockname == stockn),"n_for"]
w_l = stocks[which(stocks$stockname == stockn),"w_l"]
HAR_RSRK_fc_r[[stockn]] <- rep(NA, n_for)
for (i in 0:(n_for - 1)) {
temp <- HAR_DATA[[stockn]][(1 + i):(w_l + i - 22), ] %>% ts()
fc_data <- HAR_DATA[[stockn]][w_l + i + 1 - 22, -1]
model <- tslm(RV ~ RS + RK + RV_5 + RV_22, data = temp)
HAR_RSRK_fc_r[[stockn]][i + 1] <- predict(model, newdata=fc_data)
}
HAR_RSRK_fc_r[[stockn]] <- xts(HAR_RSRK_fc_r[[stockn]],order.by = index(allstocks[[stockn]]$ret[(w_l+1):(w_l+n_for)]))
print("   Expanding")
HAR_RSRK_fc_e[[stockn]] <- rep(NA, n_for)
for (i in 0:(n_for - 1)) {
temp <- HAR_DATA[[stockn]][1:(w_l + i - 22), ] %>% ts()
fc_data <- HAR_DATA[[stockn]][w_l + i + 1 - 22, -1]
model <- tslm(RV ~ RS + RK + RV_5 + RV_22, data = temp)
HAR_RSRK_fc_e[[stockn]][i + 1] <- predict(model, newdata=fc_data)
}
HAR_RSRK_fc_e[[stockn]]<-xts(HAR_RSRK_fc_e[[stockn]], order.by = index(allstocks[[stockn]]$ret[(w_l+1):(w_l+n_for)]))
counter = counter + 1
}
HAR_RSRK_fc_r = lapply(HAR_RSRK_fc_r, function(x) {ifelse(x<0,0,x)})
HAR_RSRK_fc_e = lapply(HAR_RSRK_fc_r, function(x) {ifelse(x<0,0,x)})
# HAR_RSRK_fc_r = lapply(HAR_RSRK_fc_r, function(x) {ifelse(is.na(x),0,x)})
# HAR_RSRK_fc_e = lapply(HAR_RSRK_fc_e, function(x) {ifelse(is.na(x),0,x)})
HAR_RSRK_fc_r = lapply(HAR_RSRK_fc_r, sqrt)
HAR_RSRK_fc_e = lapply(HAR_RSRK_fc_e, sqrt)
save(HAR_RSRK_fc_r, file = "Data/HAR_RSRK_fc_r.Rdata")
save(HAR_RSRK_fc_e, file = "Data/HAR_RSRK_fc_e.Rdata")
##############################
######### ARMA-GARCH #########
##############################
ARMAGARCH_fc_r = list()
ARMAGARCH_fc_e = list()
# Done with correct data
# Runs approximately 44 minutes
start_time = Sys.time()
print(start_time)
counter = 1
for(stockn in stocks$stockname){
w_l = stocks$w_l[which(stocks$stockname == stockn)]    # TODO set better numbers
n_for = stocks$n_for[which(stocks$stockname == stockn)] # TODO set better numbers
#  n_for = 66   # TODO what is this ?!?!?!
print(paste("ARMA-GARCH ",counter, ": ", stockn, sep = ""))
print("   Rolling")
# ARMA-GARCH
# rolling
ARMAGARCH_fc_r[[stockn]] <- ugarchroll(ARMAGARCH, 100*allstocks[[stockn]]$ret[1:(w_l+n_for+1),], n.ahead = 1, forecast.length = n_for,
n.start = NULL, refit.every = 21, refit.window = c("moving"),
window.size = w_l, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = FALSE,
keep.coef = TRUE,realizedVol = 100*(allstocks[[stockn]]$RV[1:(w_l+n_for+1),]))   # TODO: why is RV here?
ARMAGARCH_fc_r[[stockn]] <- xts(ARMAGARCH_fc_r[[stockn]]@forecast[["density"]]$Sigma,
order.by = as.Date(rownames(ARMAGARCH_fc_r[[stockn]]@forecast[["density"]])))/100
# expanding
print("   Expanding")
ARMAGARCH_fc_e[[stockn]] <- ugarchroll(ARMAGARCH, 100*allstocks[[stockn]]$ret[1:(w_l+n_for+1),], n.ahead = 1, forecast.length = n_for,
n.start = NULL, refit.every = 21, refit.window = c("recursive"),
window.size = w_l, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = FALSE,
keep.coef = TRUE,realizedVol = 100*(allstocks[[stockn]]$RV[1:(w_l+n_for+1),]))    # TODO: why is RV here?
ARMAGARCH_fc_e[[stockn]]<- xts(ARMAGARCH_fc_e[[stockn]]@forecast[["density"]]$Sigma,
order.by = as.Date(rownames(ARMAGARCH_fc_e[[stockn]]@forecast[["density"]])))/100
print(paste("Estimated termination: ",start_time + (Sys.time()  -  start_time)/counter*nrow(stocks)))
counter = counter + 1
}
save(ARMAGARCH_fc_r, file = "Data/ARMAGARCH_fc_r.Rdata")
save(ARMAGARCH_fc_e, file = "Data/ARMAGARCH_fc_e.Rdata")
end_time = Sys.time()
print(end_time-start_time)
ARMAGARCH_fc_r
head(ARMAGARCH_fc_r, 5)
head(ARMAGARCH_fc_r[[1]], 5)
RGARCH_fc_r = list()
RGARCH_fc_e = list()
# Runs approximately 7,5 hours
start_time2 = Sys.time()
print(start_time2)
counter = 1
# for(stockn in c("AAL")){
for(stockn in stocks$stockname){
w_l = stocks$w_l[which(stocks$stockname == stockn)]    # TODO set better numbers
n_for = stocks$n_for[which(stocks$stockname == stockn)] # TODO set better numbers
print(paste("RGARCH ",counter, ": ", stockn, sep = ""))
print("   Rolling")
# RGARCH
# rolling
RGARCH_fc_r[[stockn]] <- ugarchroll(RGARCH, 100*allstocks[[stockn]]$ret[1:(w_l+n_for+1),], n.ahead = 1, forecast.length = n_for,
n.start = NULL, refit.every = 21, refit.window = c("moving"), window.size = w_l,
solver = "hybrid", calculate.VaR = FALSE,keep.coef = TRUE,realizedVol = (100*sqrt(allstocks[[stockn]]$RV[1:(w_l+n_for+1),])))
RGARCH_fc_r[[stockn]] <- xts(RGARCH_fc_r[[stockn]]@forecast[["density"]]$Sigma,
order.by = as.Date(rownames(RGARCH_fc_r[[stockn]]@forecast[["density"]])))/100
# expanding
print("   Expanding")
RGARCH_fc_e[[stockn]] <- ugarchroll(RGARCH, 100*allstocks[[stockn]]$ret[1:(w_l+n_for+1),], n.ahead = 1, forecast.length = n_for,
n.start = NULL, refit.every = 21, refit.window = c("recursive"),
window.size = w_l, solver = "hybrid", calculate.VaR = FALSE,
keep.coef = TRUE,realizedVol = 100*sqrt((allstocks[[stockn]]$RV[1:(w_l+n_for+1),])))
RGARCH_fc_e[[stockn]]<- xts(RGARCH_fc_e[[stockn]]@forecast[["density"]]$Sigma,
order.by = as.Date(rownames(RGARCH_fc_e[[stockn]]@forecast[["density"]])))/100
print(paste("Estimated termination: ",start_time2 + (Sys.time()  -  start_time2)/counter*nrow(stocks)))
counter = counter + 1
}
save(RGARCH_fc_r, file = "Data/RGARCH_fc_r.Rdata")
save(RGARCH_fc_e, file = "Data/RGARCH_fc_e.Rdata")
end_time2 = Sys.time()
print(end_time2-start_time2)
save(stocks, file = "Data/stocks.Rdata")
save(allstocks, file = "Data/allstocks.Rdata")
save(HARmeasures, file = "Data/HARmeasures.Rdata")
save(AR1_RV_fit, file = "Data/AR1_RV_fit.Rdata")
save(ARMAGARCH_fit, file = "Data/ARMAGARCH_fit.Rdata")
save(HAR_fit, file = "Data/HAR_fit.Rdata")
save(HARAS_fit, file = "Data/HARAS_fit.Rdata")
save(HARS_fit, file = "Data/HARS_fit.Rdata")
save(HARSK_fit, file = "Data/HARSK_fit.Rdata")
save(RGARCH_fit, file = "Data/RGARCH_fit.Rdata")
save(ARMA_fit, file = "Data/ARMA_fit.Rdata")
save(RGARCH, file = "Data/RGARCH.Rdata")
save(ARMAGARCH, file = "Data/ARMAGARCH.Rdata")
save(pre_covid_end_date, file = "Data/pre_covid_end_date.Rdata")
save(forecast_start_date, file = "Data/forecast_start_date.Rdata")
save(minimum_length, file = "Data/minimum_length.Rdata")
save(n_for, file = "Data/n_for.Rdata")
save(max_possible_date_diff, file = "Data/max_possible_date_diff.Rdata")
save(stocks, file = "Data/stocks.Rdata")
save(allstocks, file = "Data/allstocks.Rdata")
save(HARmeasures, file = "Data/HARmeasures.Rdata")
save(data_aux, file = "Data/data_aux.Rdata")
save(TT, file = "Data/TT.Rdata")
save(RV_5, file = "Data/RV_5.Rdata")
save(RV_22, file = "Data/RV_22.Rdata")
save(T_5, file = "Data/T_5.Rdata")
save(T_22, file = "Data/T_22.Rdata")
save(HAR_DATA, file = "Data/HAR_DATA.Rdata")
save(true_vals, file = "Data/true_vals.Rdata")
save(AR1_RV_fc_r, file = "Data/AR1_RV_fc_r.Rdata")
save(AR1_RV_fc_e, file = "Data/AR1_RV_fc_e.Rdata")
save(HAR_fc_r, file = "Data/HAR_fc_r.Rdata")
save(HAR_fc_e, file = "Data/HAR_fc_e.Rdata")
save(ARMAGARCH_fc_r, file = "Data/ARMAGARCH_fc_r.Rdata")
save(ARMAGARCH_fc_e, file = "Data/ARMAGARCH_fc_e.Rdata")
save(RGARCH_fc_r, file = "Data/RGARCH_fc_r.Rdata")   # TODO: Save
save(RGARCH_fc_e, file = "Data/RGARCH_fc_e.Rdata")   # TODO: Save
save(HAR_AS_fc_r, file = "Data/HAR_AS_fc_r.Rdata")
save(HAR_AS_fc_e, file = "Data/HAR_AS_fc_e.Rdata")
save(HAR_RS_fc_r, file = "Data/HAR_RS_fc_r.Rdata")
save(HAR_RS_fc_e, file = "Data/HAR_RS_fc_e.Rdata")
save(HAR_RSRK_fc_r, file = "Data/HAR_RSRK_fc_r.Rdata")
save(HAR_RSRK_fc_e, file = "Data/HAR_RSRK_fc_e.Rdata")
save(AR1_RV_fc_e_er, file = "Data/AR1_RV_fc_e_er.Rdata")
save(AR1_RV_fc_r_er, file = "Data/AR1_RV_fc_r_er.Rdata")
save(HAR_fc_e_er, file = "Data/HAR_fc_e_er.Rdata")
save(HAR_fc_r_er, file = "Data/HAR_fc_r_er.Rdata")
save(HAR_AS_fc_e_er, file = "Data/HAR_AS_fc_e_er.Rdata")
save(HAR_AS_fc_r_er, file = "Data/HAR_AS_fc_r_er.Rdata")
save(HAR_RSV_fc_e_er, file = "Data/HAR_RSV_fc_e_er.Rdata")
save(HAR_RSV_fc_r_er, file = "Data/HAR_RSV_fc_r_er.Rdata")
save(HAR_RSRK_fc_e_er, file = "Data/HAR_RSRK_fc_e_er.Rdata")
save(HAR_RSRK_fc_r_er, file = "Data/HAR_RSRK_fc_r_er.Rdata")
save(RGARCH_fc_e_er, file = "Data/RGARCH_fc_e_er.Rdata")
save(RGARCH_fc_r_er, file = "Data/RGARCH_fc_r_er.Rdata")
save(ARMAGARCH_fc_e_er, file = "Data/ARMAGARCH_fc_e_er.Rdata")
save(ARMAGARCH_fc_r_er, file = "Data/ARMAGARCH_fc_r_er.Rdata")
save(errs, file = "Data/errs.Rdata")
save(MSE_e, file = "Data/MSE_e.Rdata")
save(MSE_r, file = "Data/MSE_r.Rdata")
save(MSEs, file = "Data/MSEs.Rdata")
save(MAE_e, file = "Data/MAE_e.Rdata")
save(MAE_r, file = "Data/MAE_r.Rdata")
save(MAEs, file = "Data/MAEs.Rdata")
save(Exp_comb , file = "Data/Exp_comb.Rdata")
save(Roll_comb, file = "Data/Roll_comb.Rdata")
save(Diebold_e, file = "Data/Diebold_e.Rdata")
save(Diebold_r, file = "Data/Diebold_r.Rdata")
save(regressions , file = "Data/regressions.Rdata")
save(Minc_AR1_RV_e , file = "Data/Minc_AR1_RV_e.Rdata")
save(Minc_AR1_RV_r , file = "Data/Minc_AR1_RV_r .Rdata")
save(Minc_HAR_e , file = "Data/Minc_HAR_e.Rdata")
save(Minc_HAR_r , file = "Data/Minc_HAR_r.Rdata")
save(Minc_HAR_AS_e , file = "Data/Minc_HAR_AS_e.Rdata")
save(Minc_HAR_AS_r , file = "Data/Minc_HAR_AS_r.Rdata")
save(Minc_HAR_RS_e , file = "Data/Minc_HAR_RS_e.Rdata")
save(Minc_HAR_RS_r , file = "Data/Minc_HAR_RS_r.Rdata")
save(Minc_HAR_RSRK_e , file = "Data/Minc_HAR_RSRK_e.Rdata")
save(Minc_HAR_RSRK_r , file = "Data/Minc_HAR_RSRK_r.Rdata")
save(Minc_RGARCH_e , file = "Data/Minc_RGARCH_e.Rdata")
save(Minc_RGARCH_r , file = "Data/Minc_RGARCH_r.Rdata")
save(Minc_ARMAGARCH_e , file = "Data/Minc_ARMAGARCH_e.Rdata")
save(Minc_ARMAGARCH_r , file = "Data/Minc_ARMAGARCH_r.Rdata")
save(mincer , file = "Data/mincer.Rdata")
save(VaR95_AR1_RV_e, file = "Data/VaR95_AR1_RV_e.Rdata")
save(VaR95_AR1_RV_r, file = "Data/VaR95_AR1_RV_r.Rdata")
save(VaR95_HAR_e, file = "Data/VaR95_HAR_e.Rdata")
save(VaR95_HAR_r, file = "Data/VaR95_HAR_r.Rdata")
save(VaR95_HAR_AS_e, file = "Data/VaR95_HAR_AS_e.Rdata")
save(VaR95_HAR_AS_r, file = "Data/VaR95_HAR_AS_r.Rdata")
save(VaR95_HAR_RSV_e, file = "Data/VaR95_HAR_RSV_e.Rdata")
save(VaR95_HAR_RSV_r, file = "Data/VaR95_HAR_RSV_r.Rdata")
save(VaR95_HAR_RSRK_e, file = "Data/VaR95_HAR_RSRK_e.Rdata")
save(VaR95_HAR_RSRK_r, file = "Data/VaR95_HAR_RSRK_r.Rdata")
save(VaR95_RGARCH_e, file = "Data/VaR95_RGARCH_e.Rdata")
save(VaR95_RGARCH_r, file = "Data/VaR95_RGARCH_r.Rdata")
save(VaR95_ARMAGARCH_e, file = "Data/VaR95_ARMAGARCH_e.Rdata")
save(VaR95_ARMAGARCH_r, file = "Data/VaR95_ARMAGARCH_r.Rdata")
save(Backtests_AR1_RV_e, file = "Data/Backtests_AR1_RV_e.Rdata")
save(Backtests_AR1_RV_r, file = "Data/Backtests_AR1_RV_r.Rdata")
save(Backtests_HAR_e, file = "Data/Backtests_HAR_e.Rdata")
save(Backtests_HAR_r, file = "Data/Backtests_HAR_r.Rdata")
save(Backtests_HAR_AS_e, file = "Data/Backtests_HAR_AS_e.Rdata")
save(Backtests_HAR_AS_r, file = "Data/Backtests_HAR_AS_r.Rdata")
save(Backtests_HAR_RS_e, file = "Data/Backtests_HAR_RS_e.Rdata")
save(Backtests_HAR_RS_r, file = "Data/Backtests_HAR_RS_r.Rdata")
save(Backtests_HAR_RSRK_e, file = "Data/Backtests_HAR_RSRK_e.Rdata")
save(Backtests_HAR_RSRK_r, file = "Data/Backtests_HAR_RSRK_r.Rdata")
save(Backtests_RGARCH_e, file = "Data/Backtests_RGARCH_e.Rdata")
save(Backtests_RGARCH_r, file = "Data/Backtests_RGARCH_r.Rdata")
save(Backtests_ARMAGARCH_e, file = "Data/Backtests_ARMAGARCH_e.Rdata")
save(Backtests_ARMAGARCH_r, file = "Data/Backtests_ARMAGARCH_r.Rdata")
save(wald_test, file = "Data/wald_test.Rdata")
save(VaRresults, file = "Data/Varresults")
RGARCH_fc_e
