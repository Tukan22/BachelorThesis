Kupiec_summary,
caption = c(
paste("This table shows the summary statistics of the p-values of the Kupiec's test on ", (1-VaRalpha), " VaR.
The first column shows the mean of p-values, the second column the standard deviation
and the third column shows in how many cases the p-value was lower than 0.05, i. e. in how many cases the VaR computation was unsuccesful.",
sep = ""),
paste("Kupiec's test p-values summary, alpha =", (1-VaRalpha), sep = "")),
label = paste("Table:Kupiec_test_summary_",(1-VaRalpha), sep = ""),
digits = 0
),
file = paste("Outputs/Kupiec_p_vals_summary_", (1-VaRalpha), ".tex", sep = "")
)
}
MAE_e_output
MAE_r_output
MSE_e_output
MSE_r_output
apply(X = MAE_e_output, MARGIN = 2, FUN =order)
apply(X = MAE_e_output, MARGIN = 1, FUN =order)
MAE_e_output
apply(X = MAE_e_output, MARGIN = 1, FUN =order)
t(apply(X = MAE_e_output, MARGIN = 1, FUN =order) )
char(t(apply(X = MAE_e_output, MARGIN = 1, FUN =order) ) )
str(t(apply(X = MAE_e_output, MARGIN = 1, FUN =order) ) )
toString(t(apply(X = MAE_e_output, MARGIN = 1, FUN =order) ) )
t(apply(X = MAE_e_output, MARGIN = 1, FUN = order) )
paste("(",t(apply(X = MAE_e_output, MARGIN = 1, FUN = order) )  )
paste("(",t(apply(X = MAE_e_output, MARGIN = 1, FUN = order) ),")")
t(apply(X = MAE_e_output, MARGIN = 1, FUN = order) ),")")
t(apply(X = MAE_e_output, MARGIN = 1, FUN = order) )
toString(t(apply(X = MAE_e_output, MARGIN = 1, FUN = order)))
t(apply(X = MAE_e_output, MARGIN = 1, FUN = order))
t(apply(X = MAE_r_output, MARGIN = 1, FUN = order))
t(apply(X = MSE_e_output, MARGIN = 1, FUN = order))
t(apply(X = MSE_r_output, MARGIN = 1, FUN = order))
Kupiec_summary
for(VaRalpha in c(0.1, 0.05, 0.01)){
VaRresults_output = VaR(VaRalpha)
colnames(VaRresults_output) = c("AR(1)-RV", "AR(1)-RV", "HAR", "HAR", "HAR-AS",
"HAR-AS", "HAR-RSV", "HAR-RSV", "HAR-RSRK", "HAR-RSRK",
"RGARCH", "RGARCH", "GARCH", "GARCH")
rownames(VaRresults_output) = stocks$stockname
print(
xtable(
VaRresults_output[seq(from = 1, to = nrow(VaRresults_output)/2),
seq(from = 1, to = ncol(VaRresults_output), by = 2)],
caption = c(
paste("This table shows the p-values of the Kupiec's test on ", (1-VaRalpha), " VaR computed using expanding forecast values of all 7 models for the first half of stocks.", sep = ""),
paste("Kupiec's test p-values, alpha =", (1-VaRalpha), " (1)", sep = "")),
label = paste("Table:Kupiec_test_expanding_",(1-VaRalpha),"_1", sep = "")
),
file = paste("Outputs/Kupiec_p_vals_e_", (1-VaRalpha), "_1.tex", sep = "")
)
print(
xtable(
VaRresults_output[seq(from = nrow(VaRresults_output)/2, to = nrow(VaRresults_output)),
seq(from = 1, to = ncol(VaRresults_output), by = 2)],
caption = c(
paste("This table shows the p-values of the Kupiec's test on ", (1-VaRalpha), " VaR computed using expanding forecast values of all 7 models for the second half of stocks.", sep = ""),
paste("Kupiec's test p-values, alpha =", (1-VaRalpha), " (2)", sep = "")),
label = paste("Table:Kupiec_test_expanding_",(1-VaRalpha),"_2", sep = "")
),
file = paste("Outputs/Kupiec_p_vals_e_", (1-VaRalpha), "_2.tex", sep = "")
)
print(
xtable(
VaRresults_output[seq(from = 1, to = nrow(VaRresults_output)/2),
seq(from = 1, to = ncol(VaRresults_output), by = 2)],
caption = c(
paste("This table shows the p-values of the Kupiec's test on ", (1-VaRalpha), " VaR computed using rolling forecast values of all 7 models for the first half of stocks.", sep = ""),
paste("Kupiec's test p-values, alpha =", (1-VaRalpha), " (1)", sep = "")),
label = paste("Table:Kupiec_test_rolling_",(1-VaRalpha),"_1", sep = "")
),
file = paste("Outputs/Kupiec_p_vals_r_", (1-VaRalpha), "_1.tex", sep = "")
)
print(
xtable(
VaRresults_output[seq(from = nrow(VaRresults_output)/2, to = nrow(VaRresults_output)),
seq(from = 1, to = ncol(VaRresults_output), by = 2)],
caption = c(
paste("This table shows the p-values of the Kupiec's test on ", (1-VaRalpha), " VaR computed using rolling forecast values of all 7 models for the second half of stocks.", sep = ""),
paste("Kupiec's test p-values, alpha =", (1-VaRalpha), " (2)", sep = "")),
label = paste("Table:Kupiec_test_rolling_",(1-VaRalpha),"_2", sep = "")
),
file = paste("Outputs/Kupiec_p_vals_r_", (1-VaRalpha), "_2.tex", sep = "")
)
VaRmeans = apply(VaRresults_output, MARGIN = 2, FUN = mean)
VaRsds = apply(VaRresults_output, MARGIN = 2, FUN = sd)
VaRouts = apply(VaRresults_output, MARGIN = 2, FUN = function(x){sum(x<0.05)})
Kupiec_summary = cbind(VaRmeans, VaRsds, VaRouts)
rownames(Kupiec_summary) = paste(rownames(Kupiec_summary), rep(c("expanding","rolling"),times = 7))
colnames(Kupiec_summary) = c("Mean","SD","p-val < 0.05")
print(
xtable(
Kupiec_summary,
caption = c(
paste("This table shows the summary statistics of the p-values of the Kupiec's test on ", (1-VaRalpha), " VaR.
The first column shows the mean of p-values, the second column the standard deviation
and the third column shows in how many cases the p-value was lower than 0.05, i. e. in how many cases the VaR computation was unsuccesful.",
sep = ""),
paste("Kupiec's test p-values summary, alpha =", (1-VaRalpha), sep = "")),
label = paste("Table:Kupiec_test_summary_",(1-VaRalpha), sep = ""),
digits = 2
),
file = paste("Outputs/Kupiec_p_vals_summary_", (1-VaRalpha), ".tex", sep = "")
)
}
print(
xtable(
Kupiec_summary,
caption = c(
paste("This table shows the summary statistics of the p-values of the Kupiec's test on ", (1-VaRalpha), " VaR.
The first column shows the mean of p-values, the second column the standard deviation
and the third column shows in how many cases the p-value was lower than 0.05, i. e. in how many cases the VaR computation was unsuccesful.",
sep = ""),
paste("Kupiec's test p-values summary, alpha =", (1-VaRalpha), sep = "")),
label = paste("Table:Kupiec_test_summary_",(1-VaRalpha), sep = ""),
digits = 2
),
file = paste("Outputs/Kupiec_p_vals_summary_", (1-VaRalpha), ".tex", sep = "")
)
for(VaRalpha in c(0.1, 0.05, 0.01)){
VaRresults_output = VaR(VaRalpha)
colnames(VaRresults_output) = c("AR(1)-RV", "AR(1)-RV", "HAR", "HAR", "HAR-AS",
"HAR-AS", "HAR-RSV", "HAR-RSV", "HAR-RSRK", "HAR-RSRK",
"RGARCH", "RGARCH", "GARCH", "GARCH")
rownames(VaRresults_output) = stocks$stockname
print(
xtable(
VaRresults_output[seq(from = 1, to = nrow(VaRresults_output)/2),
seq(from = 1, to = ncol(VaRresults_output), by = 2)],
caption = c(
paste("This table shows the p-values of the Kupiec's test on ", (1-VaRalpha), " VaR computed using expanding forecast values of all 7 models for the first half of stocks.", sep = ""),
paste("Kupiec's test p-values, alpha =", (1-VaRalpha), " (1)", sep = "")),
label = paste("Table:Kupiec_test_expanding_",(1-VaRalpha),"_1", sep = "")
),
file = paste("Outputs/Kupiec_p_vals_e_", (1-VaRalpha), "_1.tex", sep = "")
)
print(
xtable(
VaRresults_output[seq(from = nrow(VaRresults_output)/2, to = nrow(VaRresults_output)),
seq(from = 1, to = ncol(VaRresults_output), by = 2)],
caption = c(
paste("This table shows the p-values of the Kupiec's test on ", (1-VaRalpha), " VaR computed using expanding forecast values of all 7 models for the second half of stocks.", sep = ""),
paste("Kupiec's test p-values, alpha =", (1-VaRalpha), " (2)", sep = "")),
label = paste("Table:Kupiec_test_expanding_",(1-VaRalpha),"_2", sep = "")
),
file = paste("Outputs/Kupiec_p_vals_e_", (1-VaRalpha), "_2.tex", sep = "")
)
print(
xtable(
VaRresults_output[seq(from = 1, to = nrow(VaRresults_output)/2),
seq(from = 1, to = ncol(VaRresults_output), by = 2)],
caption = c(
paste("This table shows the p-values of the Kupiec's test on ", (1-VaRalpha), " VaR computed using rolling forecast values of all 7 models for the first half of stocks.", sep = ""),
paste("Kupiec's test p-values, alpha =", (1-VaRalpha), " (1)", sep = "")),
label = paste("Table:Kupiec_test_rolling_",(1-VaRalpha),"_1", sep = "")
),
file = paste("Outputs/Kupiec_p_vals_r_", (1-VaRalpha), "_1.tex", sep = "")
)
print(
xtable(
VaRresults_output[seq(from = nrow(VaRresults_output)/2, to = nrow(VaRresults_output)),
seq(from = 1, to = ncol(VaRresults_output), by = 2)],
caption = c(
paste("This table shows the p-values of the Kupiec's test on ", (1-VaRalpha), " VaR computed using rolling forecast values of all 7 models for the second half of stocks.", sep = ""),
paste("Kupiec's test p-values, alpha =", (1-VaRalpha), " (2)", sep = "")),
label = paste("Table:Kupiec_test_rolling_",(1-VaRalpha),"_2", sep = "")
),
file = paste("Outputs/Kupiec_p_vals_r_", (1-VaRalpha), "_2.tex", sep = "")
)
VaRmeans = apply(VaRresults_output, MARGIN = 2, FUN = mean)
VaRsds = apply(VaRresults_output, MARGIN = 2, FUN = sd)
VaRouts = apply(VaRresults_output, MARGIN = 2, FUN = function(x){sum(x<0.05)})
Kupiec_summary = cbind(VaRmeans, VaRsds, VaRouts)
rownames(Kupiec_summary) = paste(rownames(Kupiec_summary), rep(c("expanding","rolling"),times = 7))
colnames(Kupiec_summary) = c("Mean","SD","p-val < 0.05")
print(
xtable(
Kupiec_summary,
caption = c(
paste("This table shows the summary statistics of the p-values of the Kupiec's test on ", (1-VaRalpha), " VaR.
The first column shows the mean of p-values, the second column the standard deviation
and the third column shows in how many cases the p-value was lower than 0.05, i. e. in how many cases the VaR computation was unsuccesful.",
sep = ""),
paste("Kupiec's test p-values summary, alpha =", (1-VaRalpha), sep = "")),
label = paste("Table:Kupiec_test_summary_",(1-VaRalpha), sep = ""),
digits = 2
),
file = paste("Outputs/Kupiec_p_vals_summary_", (1-VaRalpha), ".tex", sep = "")
)
}
VaRouts
VaRsds
VaRsds
VaRouts
VaRresults_output
for(VaRalpha in c(0.1, 0.05, 0.01)){
VaRresults_output = VaR(VaRalpha)
colnames(VaRresults_output) = c("AR(1)-RV", "AR(1)-RV", "HAR", "HAR", "HAR-AS",
"HAR-AS", "HAR-RSV", "HAR-RSV", "HAR-RSRK", "HAR-RSRK",
"RGARCH", "RGARCH", "GARCH", "GARCH")
rownames(VaRresults_output) = stocks$stockname
print(
xtable(
VaRresults_output[seq(from = 1, to = nrow(VaRresults_output)/2),
seq(from = 1, to = ncol(VaRresults_output), by = 2)],
caption = c(
paste("This table shows the p-values of the Kupiec's test on ", (1-VaRalpha), " VaR computed using expanding forecast values of all 7 models for the first half of stocks.", sep = ""),
paste("Kupiec's test p-values, alpha =", (1-VaRalpha), " (1)", sep = "")),
label = paste("Table:Kupiec_test_expanding_",(1-VaRalpha),"_1", sep = "")
),
file = paste("Outputs/Kupiec_p_vals_e_", (1-VaRalpha), "_1.tex", sep = "")
)
print(
xtable(
VaRresults_output[seq(from = nrow(VaRresults_output)/2, to = nrow(VaRresults_output)),
seq(from = 1, to = ncol(VaRresults_output), by = 2)],
caption = c(
paste("This table shows the p-values of the Kupiec's test on ", (1-VaRalpha), " VaR computed using expanding forecast values of all 7 models for the second half of stocks.", sep = ""),
paste("Kupiec's test p-values, alpha =", (1-VaRalpha), " (2)", sep = "")),
label = paste("Table:Kupiec_test_expanding_",(1-VaRalpha),"_2", sep = "")
),
file = paste("Outputs/Kupiec_p_vals_e_", (1-VaRalpha), "_2.tex", sep = "")
)
print(
xtable(
VaRresults_output[seq(from = 1, to = nrow(VaRresults_output)/2),
seq(from = 1, to = ncol(VaRresults_output), by = 2)],
caption = c(
paste("This table shows the p-values of the Kupiec's test on ", (1-VaRalpha), " VaR computed using rolling forecast values of all 7 models for the first half of stocks.", sep = ""),
paste("Kupiec's test p-values, alpha =", (1-VaRalpha), " (1)", sep = "")),
label = paste("Table:Kupiec_test_rolling_",(1-VaRalpha),"_1", sep = "")
),
file = paste("Outputs/Kupiec_p_vals_r_", (1-VaRalpha), "_1.tex", sep = "")
)
print(
xtable(
VaRresults_output[seq(from = nrow(VaRresults_output)/2, to = nrow(VaRresults_output)),
seq(from = 1, to = ncol(VaRresults_output), by = 2)],
caption = c(
paste("This table shows the p-values of the Kupiec's test on ", (1-VaRalpha), " VaR computed using rolling forecast values of all 7 models for the second half of stocks.", sep = ""),
paste("Kupiec's test p-values, alpha =", (1-VaRalpha), " (2)", sep = "")),
label = paste("Table:Kupiec_test_rolling_",(1-VaRalpha),"_2", sep = "")
),
file = paste("Outputs/Kupiec_p_vals_r_", (1-VaRalpha), "_2.tex", sep = "")
)
VaRmeans = apply(VaRresults_output, MARGIN = 2, FUN = mean)
VaRsds = apply(VaRresults_output, MARGIN = 2, FUN = sd)
VaRouts = apply(VaRresults_output, MARGIN = 2, FUN = function(x){sum(x<0.05)})/nrow(VaRresults_output)
Kupiec_summary = cbind(VaRmeans, VaRsds, VaRouts)
rownames(Kupiec_summary) = paste(rownames(Kupiec_summary), rep(c("expanding","rolling"),times = 7))
colnames(Kupiec_summary) = c("Mean","SD","p-val < 0.05")
print(
xtable(
Kupiec_summary,
caption = c(
paste("This table shows the summary statistics of the p-values of the Kupiec's test on ", (1-VaRalpha), " VaR.
The first column shows the mean of p-values, the second column the standard deviation
and the third column shows in how many cases the p-value was lower than 0.05, i. e. in how many cases the VaR computation was unsuccesful.",
sep = ""),
paste("Kupiec's test p-values summary, alpha =", (1-VaRalpha), sep = "")),
label = paste("Table:Kupiec_test_summary_",(1-VaRalpha), sep = ""),
digits = 2
),
file = paste("Outputs/Kupiec_p_vals_summary_", (1-VaRalpha), ".tex", sep = "")
)
}
tquantile
qt(p = VaRalpha, df = fit.df)
library(arrow)
library(xts)
library(graphics)
library(RColorBrewer)
library(ggplot2)
library(tseries)
library(dplyr)
library(aod)
library(stargazer)
library(xtable)
library(stats)
library(zoo)
library(forecast)
library(rugarch)
library(xts)
library(highfrequency)
library(fitdistrplus)
library(MASS)
library(mosaic)
library(segMGarch)
library(GAS)
##############################
### READING FROM PARQUET   ###
###    Not necessary if    ###
### .RData files available ###
##############################
# #read all filenames
# stocks = as.data.frame(list.files("Data/parquet"))
# #create stock names from file names
# names(stocks) = "filename"
# stocks$stockname = substr(stocks$filename, 4, nchar(stocks$filename))
# # head(stocks)
# allstocks = list()
# for(i in seq(1,nrow(stocks))){
#  # read file
#  allstocks[[stocks[i,"stockname"]]] =as.xts(read_parquet(paste("Data/parquet/", stocks[i,"filename"], sep="")))
#  # print(sum(is.na(allstocks[[stocks[i,"stockname"]]])))
#  # check if No Na's are present
#  stocks$NoNas[i] = sum(is.na(allstocks[[stocks[i,"stockname"]]])) == 0
#  # compute returns
#  allstocks[[stocks[i,"stockname"]]]$ret = diff(allstocks[[stocks[i,"stockname"]]][,"close_price"])/lag(allstocks[[stocks[i,"stockname"]]][,"close_price"])
#  # reorganize  columns
#  allstocks[[stocks[i,"stockname"]]] = allstocks[[stocks[i,"stockname"]]][,c(7,2,3,4,5,6,1)]
#  allstocks[[stocks[i,"stockname"]]] = allstocks[[stocks[i,"stockname"]]][-1,]
#}
for(filename in setdiff(list.files("Data"), list.dirs("Data", recursive = FALSE, full.names = FALSE))){
load(paste("Data/", filename, sep = ""))
}
# Model parameters - loaded from data
# minimum_length = 1000
# pre_covid_end_date = as.Date("2019-11-29")
# n_for = 66
# max_possible_date_diff = 21
# forecast_start_date = as.Date("2019-11-29")
AR1_RV_fit = list()
HAR_fit = list()
HARAS_fit = list()
HARS_fit = list()
HARSK_fit = list()
RGARCH_fit = list()
ARMAGARCH_fit = list()
RGARCH = list()
HARmeasures = list()
# Compute values for realized HAR models
for(stockn in stocks$stockname){
TT <- length(allstocks[[stockn]]$RV)
RV_0 <- as.numeric(allstocks[[stockn]]$RV[23:TT])
RV_1 <- as.numeric(allstocks[[stockn]]$RV[22:(TT - 1)])
RV_5 <- unlist(lapply(lapply(1:(TT - 4), function (t) {return(RV_0[t:(t + 4)])}), mean))
T_5 <- length(RV_5)
RV_5 <- RV_5[18:(T_5 - 1)]
RV_22 <- unlist(lapply(lapply(1:(TT - 21), function (t) {return(RV_0[t:(t + 21)])}), mean))
T_22 <- length(RV_22)
RV_22 <- RV_22[1:(T_22 - 1)]
RV_n <- as.numeric(allstocks[[stockn]]$RSm[22:(TT - 1)])
RV_p <- as.numeric(allstocks[[stockn]]$RSp[22:(TT - 1)])
RK <- as.numeric(allstocks[[stockn]]$RKu[22:(TT - 1)])     # TODO: What is this?!?
RS <- as.numeric(allstocks[[stockn]]$RSk[22:(TT - 1)])     # TODO: What is this?!?
output = data.frame(RV_0, RV_1, RV_5, RV_22, RV_n, RV_p, RK, RS)
HARmeasures[[stockn]] = output
}
# All model fittings - runs approximately 15 minutes.
start_time = Sys.time()
counter = 1
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV, solver ='hybrid')
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV, solver ='hybrid')
counter = counter + 1
}
start_time = Sys.time()
counter = 1
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
#  AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
#  HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
#  HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
#  HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
#  HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV, solver ='hybrid')
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV, solver ='hybrid')
counter = counter + 1
}
start_time = Sys.time()
counter = 1
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
#  AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
#  HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
#  HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
#  HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
#  HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
#  ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
start_time = Sys.time()
counter = 1
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
#  AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
#  HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
#  HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
#  HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
#  HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
#  ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
#                          variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
#  ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV, solver ='hybrid')
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV, solver ='hybrid')
counter = counter + 1
}
library(arrow)
library(xts)
library(graphics)
library(RColorBrewer)
library(ggplot2)
library(tseries)
library(dplyr)
library(aod)
library(stargazer)
library(xtable)
library(stats)
library(zoo)
library(forecast)
library(rugarch)
library(xts)
library(highfrequency)
library(fitdistrplus)
library(MASS)
library(mosaic)
library(segMGarch)
library(GAS)
##############################
### READING FROM PARQUET   ###
###    Not necessary if    ###
### .RData files available ###
##############################
# #read all filenames
# stocks = as.data.frame(list.files("Data/parquet"))
# #create stock names from file names
# names(stocks) = "filename"
# stocks$stockname = substr(stocks$filename, 4, nchar(stocks$filename))
# # head(stocks)
# allstocks = list()
# for(i in seq(1,nrow(stocks))){
#  # read file
#  allstocks[[stocks[i,"stockname"]]] =as.xts(read_parquet(paste("Data/parquet/", stocks[i,"filename"], sep="")))
#  # print(sum(is.na(allstocks[[stocks[i,"stockname"]]])))
#  # check if No Na's are present
#  stocks$NoNas[i] = sum(is.na(allstocks[[stocks[i,"stockname"]]])) == 0
#  # compute returns
#  allstocks[[stocks[i,"stockname"]]]$ret = diff(allstocks[[stocks[i,"stockname"]]][,"close_price"])/lag(allstocks[[stocks[i,"stockname"]]][,"close_price"])
#  # reorganize  columns
#  allstocks[[stocks[i,"stockname"]]] = allstocks[[stocks[i,"stockname"]]][,c(7,2,3,4,5,6,1)]
#  allstocks[[stocks[i,"stockname"]]] = allstocks[[stocks[i,"stockname"]]][-1,]
#}
for(filename in setdiff(list.files("Data"), list.dirs("Data", recursive = FALSE, full.names = FALSE))){
load(paste("Data/", filename, sep = ""))
}
# Model parameters - loaded from data
# minimum_length = 1000
# pre_covid_end_date = as.Date("2019-11-29")
# n_for = 66
# max_possible_date_diff = 21
# forecast_start_date = as.Date("2019-11-29")
start_time = Sys.time()
counter = 1
for(stockn in stocks$stockname){
print(paste(counter,": ", stockn, sep = ""))
#  AR1_RV_fit[[stockn]] <- arima(allstocks[[stockn]]$RV, order = c(1, 0, 0))
#  HAR_fit[[stockn]] <- lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
#  HARAS_fit[[stockn]]<-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RV_p + HARmeasures[[stockn]]$RV_n + HARmeasures[[stockn]]$RV_5+ HARmeasures[[stockn]]$RV_22)
#  HARS_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
#  HARSK_fit[[stockn]] <-lm(HARmeasures[[stockn]]$RV_0 ~ HARmeasures[[stockn]]$RS + HARmeasures[[stockn]]$RK + HARmeasures[[stockn]]$RV_1 + HARmeasures[[stockn]]$RV_5 + HARmeasures[[stockn]]$RV_22)
#  ARMAGARCH <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean=TRUE), # TODO ARMA order
#                          variance.model = list(garchOrder = c(1, 1)), distribution.model = "std") # TODO GARCH order
#  ARMAGARCH_fit[[stockn]] <- ugarchfit(ARMAGARCH, allstocks[[stockn]]$ret, realizedVol = allstocks[[stockn]]$RV, solver ='hybrid')
RGARCH<- ugarchspec(variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), # TODO ARMA order, # TODO GARCH order
mean.model = list(armaOrder=c(0, 0)),distribution.model = "std") # TODO distribution model
RGARCH_fit[[stockn]] <- ugarchfit(spec = RGARCH, data = allstocks[[stockn]]$ret, realizedVol= allstocks[[stockn]]$RV, solver ='hybrid')
counter = counter + 1
}
RGARCH_fc_r = list()
RGARCH_fc_e = list()
# Runs approximately 18 hours
start_time2 = Sys.time()
counter = 1
for(stockn in stocks$stockname){
w_l = stocks$w_l[which(stocks$stockname == stockn)]    # TODO set better numbers
n_for = stocks$n_for[which(stocks$stockname == stockn)] # TODO set better numbers
print(paste("RGARCH ",counter, ": ", stockn, sep = ""))
print("   Rolling")
# RGARCH
# rolling
RGARCH_fc_r[[stockn]] <- ugarchroll(RGARCH, 100*allstocks[[stockn]]$ret[1:(w_l+n_for+1),], n.ahead = 1, forecast.length = n_for,
n.start = NULL, refit.every = 20, refit.window = c("moving"), window.size = w_l,
solver = "hybrid", calculate.VaR = FALSE,keep.coef = TRUE,realizedVol = (100*sqrt(allstocks[[stockn]]$RV[1:(w_l+n_for+1),])))
RGARCH_fc_r[[stockn]] <- xts(RGARCH_fc_r[[stockn]]@forecast[["density"]]$Sigma,
order.by = as.Date(rownames(RGARCH_fc_r[[stockn]]@forecast[["density"]])))/100
# expanding
print("   Expanding")
RGARCH_fc_e[[stockn]] <- ugarchroll(RGARCH, 100*allstocks[[stockn]]$ret[1:(w_l+n_for+1),], n.ahead = 1, forecast.length = n_for,
n.start = NULL, refit.every = 20, refit.window = c("recursive"),
window.size = w_l, solver = "hybrid", calculate.VaR = FALSE,
keep.coef = TRUE,realizedVol = 100*sqrt((allstocks[[stockn]]$RV[1:(w_l+n_for+1),])))
RGARCH_fc_e[[stockn]]<- xts(RGARCH_fc_e[[stockn]]@forecast[["density"]]$Sigma,
order.by = as.Date(rownames(RGARCH_fc_e[[stockn]]@forecast[["density"]])))/100
counter = counter + 1
}
