BackTest1 = BacktestVaR(data = allstocks[["AAL"]]$ret, VaR = VaR95_AR1_RV_e[["AAL"]], alpha = 0.05)
BackTest2 = BacktestVaR(data = allstocks[["XOM"]]$ret, VaR = VaR95_AR1_RV_e[["XOM"]], alpha = 0.05)
allstocks[["AAL"]]$ret
retstouse1 = allstocks[["AAL"]]$ret[which(
(index(allstocks[["AAL"]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[["AAL"]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
retstouse1 = allstocks[["AAL"]]$ret[which(
(index(allstocks[["AAL"]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[["AAL"]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
retstouse2 = allstocks[["XOM"]]$ret[which(
(index(allstocks[["XOM"]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[["XOM"]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
retstouse2
BackTest1 = BacktestVaR(data = retstouse1, VaR = VaR95_AR1_RV_e[["AAL"]], alpha = 0.05)
BackTest2 = BacktestVaR(data = retstouse2, VaR = VaR95_AR1_RV_e[["XOM"]], alpha = 0.05)
BackTest1
BackTest2
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
sum(retstouse < VaR95_AR1_RV_e[[stockn]]) / nrow(VaR95_AR1_RV_e[[stockn]])
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
# print(stockn)
result <- tryCatch({
x=as.xts(AR1_RV_fc_e[[stockn]])   # *1000 because otherwise the MLE estimation fails
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Assuming t distribution
+ AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = AR1_RV_fc_e_er[[stockn]], VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)  # Does not make sense, here should be the returns
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
# print(stockn)
result <- tryCatch({
x=as.xts(AR1_RV_fc_e[[stockn]])   # *1000 because otherwise the MLE estimation fails
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Assuming t distribution
- AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = AR1_RV_fc_e_er[[stockn]], VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)  # Does not make sense, here should be the returns
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
# print(stockn)
result <- tryCatch({
x=as.xts(AR1_RV_fc_e[[stockn]])   # *1000 because otherwise the MLE estimation fails
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Assuming t distribution
+ AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = AR1_RV_fc_e_er[[stockn]], VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)  # Does not make sense, here should be the returns
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
x=as.xts(AR1_RV_fc_e[[stockn]])   # *1000 because otherwise the MLE estimation fails
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Assuming t distribution
+ AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)  # Does not make sense, here should be the returns
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
x=as.xts(AR1_RV_fc_e[[stockn]])   # *1000 because otherwise the MLE estimation fails
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Assuming t distribution
+ AR1_RV_fc_e[[stockn]]*qt(p = 0.95, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)  # Does not make sense, here should be the returns
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
x=as.xts(AR1_RV_fc_e[[stockn]])   # *1000 because otherwise the MLE estimation fails
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Assuming t distribution
+ AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)  # Does not make sense, here should be the returns
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
sum(retstouse < VaR95_AR1_RV_e[[stockn]]) / nrow(VaR95_AR1_RV_e[[stockn]])
sum(retstouse < VaR95_AR1_RV_e[[stockn]]) / nrow(VaR95_AR1_RV_e[[stockn]])
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
x=as.xts(AR1_RV_fc_e[[stockn]])   # *1000 because otherwise the MLE estimation fails
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
+ AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)  # Does not make sense, here should be the returns
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
x=as.xts(AR1_RV_fc_e[[stockn]])   # *1000 because otherwise the MLE estimation fails
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
#    VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Assuming t distribution
#                                       + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
VaR95_AR1_RV_e[[stockn]]  = as.xts(retstouse)        # Assuming t distribution
#                                       + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)  # Does not make sense, here should be the returns
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
x=as.xts(AR1_RV_fc_e[[stockn]])   # *1000 because otherwise the MLE estimation fails
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Assuming t distribution
+ AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
VaR95_AR1_RV_e[[stockn]]  = as.xts(retstouse)        # Assuming t distribution
#                                       + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
#    BackTest = BacktestVaR(data = retstouse, VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)  # Does not make sense, here should be the returns
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
x=as.xts(AR1_RV_fc_e[[stockn]])   # *1000 because otherwise the MLE estimation fails
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Assuming t distribution
+ AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)  # Does not make sense, here should be the returns
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
retstouse
average(retstouse)
mean(retstouse)
BacktestVaR(data = retstouse, VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)
mean(retstouse)
BacktestVaR(data = retstouse, VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)
mean(retstouse)
mean(VaR95_AR1_RV_e[[stockn])
mean(VaR95_AR1_RV_e[[stockn])
mean(VaR95_AR1_RV_e[[stockn]])
qt(p = 0.05, df = fit.df))
qt(p = 0.05, df = fit.df)
mean(retstouse)
AR1_RV_fc_e[[stockn]]
mean(AR1_RV_fc_e[[stockn]])
mean(retstouse)
mean(VaR95_AR1_RV_e[[stockn]])
mean(AR1_RV_fc_e[[stockn]])
mean(allstocks[[stockn]]$ret
mean(retstouse)
mean(retstouse)
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)  # Does not make sense, here should be the returns
VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
+ AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
sum(retstouse < VaR95_AR1_RV_e[[stockn]]) / nrow(VaR95_AR1_RV_e[[stockn]])
mean(retstouse)
sum(retstouse < VaR95_AR1_RV_e[[stockn]]) / nrow(VaR95_AR1_RV_e[[stockn]])
fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fitdistr(
x = allstocks[[stockn]]$ret,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
################# TODO: Here is the error, the distribution should be fitting the returns!
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])   # *1000 because otherwise the MLE estimation fails
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Assuming t distribution
+ AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)  # Does not make sense, here should be the returns
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
sum(retstouse < VaR95_AR1_RV_e[[stockn]]) / nrow(VaR95_AR1_RV_e[[stockn]])
AR1_RV_fc_e[[stockn]]
allstocks[[stockn]]$ret
mean(retstouse)
mean(VaR95_AR1_RV_e[[stockn]])
mean(allstocks[[stockn]]$ret)
mean(VaR95_AR1_RV_e[[stockn]])
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
+ AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)  # Does not make sense, here should be the returns
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
stockn = "XOM"
sum(retstouse < VaR95_AR1_RV_e[[stockn]]) / nrow(VaR95_AR1_RV_e[[stockn]])
mean(allstocks[[stockn]]$ret)
mean(VaR95_AR1_RV_e[[stockn]])
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
+ AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)  # Does not make sense, here should be the returns
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
stocks$JBpval_rets
plot(allstocks[["AAPL"]])
plot(allstocks[["AAPL"]]$ret)
hist(allstocks[["AAPL"]]$ret)
hist(allstocks[["AAPL"]]$ret, breaks = 5)
hist(allstocks[["AAPL"]]$ret, breaks = 50)
g = allstocks[["AAPL"]]$ret
hist(g, breaks = 50)
hist(g, breaks = 50, main = stockn)
stockn = "AAPL"
g = allstocks[[stockn]]$ret
hist(g, breaks = 50, main = stockn)
xfit <- seq(min(g), max(g), length = 40)
yfit <- dnorm(xfit, mean = mean(g), sd = sd(g))
yfit <- yfit * diff(h$mids[1:2]) * length(g)
lines(xfit, yfit, col = "black", lwd = 2)
yfit <- yfit * diff(h$mids[1:2]) * length(g)
h <- hist(g, breaks = 50, main = stockn)
xfit <- seq(min(g), max(g), length = 40)
yfit <- dnorm(xfit, mean = mean(g), sd = sd(g))
yfit <- yfit * diff(h$mids[1:2]) * length(g)
lines(xfit, yfit, col = "black", lwd = 2)
lines(xfit, yfit, col = "black", lwd = 2)
stockn = "AAPL"
g = allstocks[[stockn]]$ret
g = allstocks[[stockn]]$ret
hist(g, breaks = 50, main = stockn)
xfit <- seq(min(g), max(g), length = 40)
yfit <- dnorm(xfit, mean = mean(g), sd = sd(g))
lines(xfit, yfit, col = "black", lwd = 2)
mean(g)
sd(g)
for(stockn in stocks$stockname){
g = allstocks[[stockn]]$ret
hist(g, breaks = 50, main = stockn)
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Assuming t distribution
+ AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)  # Does not make sense, here should be the returns
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
AR1
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Assuming t distribution
+ ARMAGARCH_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_RV_e[[stockn]], alpha = 0.05)  # Does not make sense, here should be the returns
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Assuming t distribution
+ AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_AR1_RV_e[[stockn]], alpha = 0.05)  # Does not make sense, here should be the returns
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
