LBresid =   unlist(
lapply(
ARMA_fit,
FUN = function(x){
Box.test(x$residuals, type = 'Ljung-Box',lag = 1)$p.value
#      Box.test(x$residuals, type = 'Box-Pierce',lag = 5)$p.value
}
)
)
boxplot(LBresid, type = 'o', main = "Ljung-Box test on residuals of ARMA(1,1) model", yaxt = 'n', cex.main = 2, xlab = "p-value", cex.lab = 2)
abline(h = 0.05, col = "red", lty = 2, lwd = 2)
axis(2, at=seq(from = 0, to = 1, by = 0.05), labels=TRUE, las = 2, cex.axis = 1.8)
LBresid =   unlist(
lapply(
ARMA_fit,
FUN = function(x){
Box.test(x$residuals, type = 'Ljung-Box',lag = 10)$p.value
#      Box.test(x$residuals, type = 'Box-Pierce',lag = 5)$p.value
}
)
)
boxplot(LBresid, type = 'o', main = "Ljung-Box test on residuals of ARMA(1,1) model", yaxt = 'n', cex.main = 2, xlab = "p-value", cex.lab = 2)
abline(h = 0.05, col = "red", lty = 2, lwd = 2)
axis(2, at=seq(from = 0, to = 1, by = 0.05), labels=TRUE, las = 2, cex.axis = 1.8)
LBresid =   unlist(
lapply(
ARMA_fit,
FUN = function(x){
Box.test(x$residuals, type = 'Ljung-Box',lag = 7)$p.value
#      Box.test(x$residuals, type = 'Box-Pierce',lag = 5)$p.value
}
)
)
boxplot(LBresid, type = 'o', main = "Ljung-Box test on residuals of ARMA(1,1) model", yaxt = 'n', cex.main = 2, xlab = "p-value", cex.lab = 2)
abline(h = 0.05, col = "red", lty = 2, lwd = 2)
axis(2, at=seq(from = 0, to = 1, by = 0.05), labels=TRUE, las = 2, cex.axis = 1.8)
LBresid =   unlist(
lapply(
ARMA_fit,
FUN = function(x){
Box.test(x$residuals, type = 'Ljung-Box',lag = 20)$p.value
#      Box.test(x$residuals, type = 'Box-Pierce',lag = 5)$p.value
}
)
)
boxplot(LBresid, type = 'o', main = "Ljung-Box test on residuals of ARMA(1,1) model", yaxt = 'n', cex.main = 2, xlab = "p-value", cex.lab = 2)
abline(h = 0.05, col = "red", lty = 2, lwd = 2)
nrow(x$residuals)
nrow(ARMA_fit$residuals)
ARMA_fit$residuals
LBresid =   unlist(
lapply(
ARMA_fit,
FUN = function(x){
Box.test(x$residuals, type = 'Ljung-Box',lag = 20)$p.value
#      Box.test(x$residuals, type = 'Box-Pierce',lag = 5)$p.value
}
)
)
nrow(ARMA_fit[[stockn]]$residuals)
ARMA_fit[[stockn]]
ARMA_fit[[stockn]]$residuals
length(ARMA_fit[[stockn]]$residuals)
log(length(ARMA_fit[[stockn]]$residuals))
LBresid =   unlist(
lapply(
ARMA_fit,
FUN = function(x){
Box.test(x$residuals, type = 'Ljung-Box',lag = log(length(x$residuals)) )$p.value
#      Box.test(x$residuals, type = 'Box-Pierce',lag = 5)$p.value
}
)
)
boxplot(LBresid, type = 'o', main = "Ljung-Box test on residuals of ARMA(1,1) model", yaxt = 'n', cex.main = 2, xlab = "p-value", cex.lab = 2)
abline(h = 0.05, col = "red", lty = 2, lwd = 2)
pdf(file = "Plots/LBresidpval.pdf", width = 16, height = 12)
LBresid =   unlist(
lapply(
ARMA_fit,
FUN = function(x){
Box.test(x$residuals, type = 'Ljung-Box',lag = log(length(x$residuals)) )$p.value
#      Box.test(x$residuals, type = 'Box-Pierce',lag = 5)$p.value
}
)
)
boxplot(LBresid, type = 'o', main = "Ljung-Box test on residuals of ARMA(1,1) model", yaxt = 'n', cex.main = 2, xlab = "p-value", cex.lab = 2)
abline(h = 0.05, col = "red", lty = 2, lwd = 2)
axis(2, at=seq(from = 0, to = 1, by = 0.05), labels=TRUE, las = 2, cex.axis = 1.8)
dev.off()
LBresid =   unlist(
lapply(
ARMA_fit,
FUN = function(x){
jarque.bera.test(x$residuals, type = 'Ljung-Box',lag = 5)$p.value
#      Box.test(x$residuals, type = 'Box-Pierce',lag = 5)$p.value
}
)
)
LBresid =   unlist(
lapply(
ARMA_fit,
FUN = function(x){
jarque.bera.test(x$residuals, type = 'Ljung-Box')$p.value
#      Box.test(x$residuals, type = 'Box-Pierce',lag = 5)$p.value
}
)
)
LBresid =   unlist(
lapply(
ARMA_fit,
FUN = function(x){
jarque.bera.test(x$residuals)$p.value
#      Box.test(x$residuals, type = 'Box-Pierce',lag = 5)$p.value
}
)
)
JBresid =   unlist(
lapply(
ARMA_fit,
FUN = function(x){
jarque.bera.test(x$residuals)$p.value
#      Box.test(x$residuals, type = 'Box-Pierce',lag = 5)$p.value
}
)
)
LBresid =   unlist(
lapply(
ARMA_fit,
FUN = function(x){
Box.test(x$residuals, type = 'Ljung-Box',lag = log(length(x$residuals)) )$p.value
#      Box.test(x$residuals, type = 'Box-Pierce',lag = 5)$p.value
}
)
)
boxplot(LBresid, type = 'o', main = "Ljung-Box test on residuals of ARMA(1,1) model", yaxt = 'n', cex.main = 2, xlab = "p-value", cex.lab = 2)
abline(h = 0.05, col = "red", lty = 2, lwd = 2)
axis(2, at=seq(from = 0, to = 1, by = 0.05), labels=TRUE, las = 2, cex.axis = 1.8)
dev.off()
JBresid =   unlist(
lapply(
ARMA_fit,
FUN = function(x){
jarque.bera.test(x$residuals)$p.value
#      Box.test(x$residuals, type = 'Box-Pierce',lag = 5)$p.value
}
)
)
sd = as.data.frame(as.character(stocks$start_date),row.names = stocks$stockname)
boxplot(JBresid, type = 'o', main = "Jarque-Bera test on residuals of ARMA(1,1) model", yaxt = 'n', cex.main = 2, xlab = "p-value", cex.lab = 2)
abline(h = 0.05, col = "red", lty = 2, lwd = 2)
axis(2, at=seq(from = 0, to = 1, by = 0.05), labels=TRUE, las = 2, cex.axis = 1.8)
pdf(file = "Plots/LBresidpval.pdf", width = 16, height = 12)
LBresid =   unlist(
lapply(
ARMA_fit,
FUN = function(x){
Box.test(x$residuals, type = 'Ljung-Box',lag = log(length(x$residuals)) )$p.value
#      Box.test(x$residuals, type = 'Box-Pierce',lag = 5)$p.value
}
)
)
boxplot(LBresid, type = 'o', main = "Ljung-Box test on residuals of ARMA(1,1) model", yaxt = 'n', cex.main = 2, xlab = "p-value", cex.lab = 2)
abline(h = 0.05, col = "red", lty = 2, lwd = 2)
axis(2, at=seq(from = 0, to = 1, by = 0.05), labels=TRUE, las = 2, cex.axis = 1.8)
dev.off()
MSE_e[[stockn]]
DM_box_data_e
DM_box_data_e
library(stringr)
library(arrow)
library(xts)
library(graphics)
library(RColorBrewer)
library(ggplot2)
library(tseries)
library(dplyr)
library(aod)
library(stargazer)
library(xtable)
library(stats)
library(zoo)
library(forecast)
library(rugarch)
library(xts)
library(highfrequency)
library(fitdistrplus)
library(MASS)
library(mosaic)
library(segMGarch)
library(GAS)
##############################
### READING FROM PARQUET   ###
###    Not necessary if    ###
### .RData files available ###
##############################
# #read all filenames
# stocks = as.data.frame(list.files("Data/parquet"))
# #create stock names from file names
# names(stocks) = "filename"
# stocks$stockname = substr(stocks$filename, 4, nchar(stocks$filename))
# # head(stocks)
# allstocks = list()
# for(i in seq(1,nrow(stocks))){
#  # read file
#  allstocks[[stocks[i,"stockname"]]] =as.xts(read_parquet(paste("Data/parquet/", stocks[i,"filename"], sep="")))
#  # print(sum(is.na(allstocks[[stocks[i,"stockname"]]])))
#  # check if No Na's are present
#  stocks$NoNas[i] = sum(is.na(allstocks[[stocks[i,"stockname"]]])) == 0
#  # compute returns
#  allstocks[[stocks[i,"stockname"]]]$ret = diff(allstocks[[stocks[i,"stockname"]]][,"close_price"])/lag(allstocks[[stocks[i,"stockname"]]][,"close_price"])
#  # reorganize  columns
#  allstocks[[stocks[i,"stockname"]]] = allstocks[[stocks[i,"stockname"]]][,c(7,2,3,4,5,6,1)]
#  allstocks[[stocks[i,"stockname"]]] = allstocks[[stocks[i,"stockname"]]][-1,]
#}
for(filename in setdiff(list.files("Data"), list.dirs("Data", recursive = FALSE, full.names = FALSE))){
load(paste("Data/", filename, sep = ""))
}
# Model parameters - loaded from data
# minimum_length = 1000
# pre_covid_end_date = as.Date("2019-05-24")
# n_for = 66
# max_possible_date_diff = 21
# forecast_start_date = as.Date("2019-05-24")
DM_box_data_e
modelnames = c("AR(1)-RV","HAR","HAR-AS","HAR-RSV","HAR-RSRK","RGARCH","ARMAGARCH")
# pdf(file = "Plots/DMpval.pdf", width = 16, height = 12)
par(mfrow = c(1,7))
for(i1 in seq(from = 1, to =7)){
modelselection = seq(from = 1, to = 7)[-i1]
#  print(modelselection)
DM_box_data_e = data.frame(matrix(rep(NA, times = 7*nrow(stocks)),
ncol = nrow(stocks)))
for(i2 in modelselection){
DM_box_data_e[i2,] = unlist(DMresults_e[[i1]][[i2]])
}
rownames(DM_box_data_e) = modelnames
par(bty = 'n')
boxplot(t(DM_box_data_e)[,modelselection], ylim = c(0,1),
main = modelnames[i1], xaxt = 'n', cex.main = 2, yaxt = 'n', bty = 'n')
abline(h = 0.05, col = "red", lwd = 4, lty = 2)
axis(1, at=1:6, labels=FALSE, xaxt ='n')
axis(2, at=seq(from = 0, to = 1, by = 0.05), labels=seq(from = 0, to = 1, by = 0.05), xaxt ='n')
# indent = 10^(round(log(mean(plotvar), base = 10))-2)*5
text(x=1:6, y=par("usr")[3]+0.025 , labels=modelnames[modelselection], srt=90, adj=1, xpd=TRUE, cex=1.5)
}
DM_box_data_e
DM_box_data_e_old = DM_box_data_e
VaRresults = list()
Exp_fc_list <- list(AR1_RV_fc_e, HAR_fc_e, HAR_AS_fc_e, HAR_RS_fc_e, HAR_RSRK_fc_e, RGARCH_fc_e, ARMAGARCH_fc_e)
Rol_fc_list <- list(AR1_RV_fc_r, HAR_fc_r, HAR_AS_fc_r, HAR_RS_fc_r, HAR_RSRK_fc_r, RGARCH_fc_r, ARMAGARCH_fc_r)
DMresults_e = list()
DMresults_r = list()
for(i1 in seq(from = 1, to =  7)){
DMresults_e[[i1]] = list()
DMresults_r[[i1]] = list()
for(i2 in seq(from =  1, to = 7)){
DMresults_e[[i1]][[i2]] = list()
DMresults_r[[i1]][[i2]] = list()
if(i1 != i2){
for(stockn in stocks$stockname){
DMresults_e[[i1]][[i2]][[stockn]] = dm.test(abs(true_vals[[stockn]]-Exp_fc_list[[i1]][[stockn]]), abs(true_vals[[stockn]]-Exp_fc_list[[i2]][[stockn]]), alternative = "less")$p.value
DMresults_r[[i1]][[i2]][[stockn]] = dm.test(abs(true_vals[[stockn]]-Rol_fc_list[[i1]][[stockn]]), abs(true_vals[[stockn]]-Rol_fc_list[[i2]][[stockn]]), alternative = "less")$p.value
}
}
}
}
modelnames = c("AR(1)-RV", "HAR", "HAR-AS", "HAR-RSV", "HAR-RSRK", "RGARCH", "GARCH")
DM_output_e = data.frame(matrix(rep(NA, times = 49), ncol = 7))
DM_output_r = data.frame(matrix(rep(NA, times = 49), ncol = 7))
rownames(DM_output_e) = c("AR(1)-RV", "HAR", "HAR-AS", "HAR-RSV", "HAR-RSRK", "RGARCH", "GARCH")
colnames(DM_output_e) = c("AR(1)-RV", "HAR", "HAR-AS", "HAR-RSV", "HAR-RSRK", "RGARCH", "GARCH")
rownames(DM_output_r) = c("AR(1)-RV", "HAR", "HAR-AS", "HAR-RSV", "HAR-RSRK", "RGARCH", "GARCH")
colnames(DM_output_r) = c("AR(1)-RV", "HAR", "HAR-AS", "HAR-RSV", "HAR-RSRK", "RGARCH", "GARCH")
for(i1 in seq(from = 1, to =  7)){
for(i2 in seq(from =  1, to = 7)){
if(i1 != i2){
DM_output_e[i1,i2] = mean(unlist(DMresults_e[[i1]][[i2]]))
DM_output_r[i1,i2] = mean(unlist(DMresults_r[[i1]][[i2]]))
}
}
}
DM_box_data_e
DM_box_data_e_old
modelnames = c("AR(1)-RV","HAR","HAR-AS","HAR-RSV","HAR-RSRK","RGARCH","ARMAGARCH")
# pdf(file = "Plots/DMpval.pdf", width = 16, height = 12)
par(mfrow = c(1,7))
for(i1 in seq(from = 1, to =7)){
modelselection = seq(from = 1, to = 7)[-i1]
#  print(modelselection)
DM_box_data_e = data.frame(matrix(rep(NA, times = 7*nrow(stocks)),
ncol = nrow(stocks)))
for(i2 in modelselection){
DM_box_data_e[i2,] = unlist(DMresults_e[[i1]][[i2]])
}
rownames(DM_box_data_e) = modelnames
par(bty = 'n')
boxplot(t(DM_box_data_e)[,modelselection], ylim = c(0,1),
main = modelnames[i1], xaxt = 'n', cex.main = 2, yaxt = 'n', bty = 'n')
abline(h = 0.05, col = "red", lwd = 4, lty = 2)
axis(1, at=1:6, labels=FALSE, xaxt ='n')
axis(2, at=seq(from = 0, to = 1, by = 0.05), labels=seq(from = 0, to = 1, by = 0.05), xaxt ='n')
# indent = 10^(round(log(mean(plotvar), base = 10))-2)*5
text(x=1:6, y=par("usr")[3]+0.025 , labels=modelnames[modelselection], srt=90, adj=1, xpd=TRUE, cex=1.5)
}
DM_box_data_e
DM_box_data_e_old
DM_box_data_e_old + DM_box_data_e
Exp_fc_list <- list(AR1_RV_fc_e, HAR_fc_e, HAR_AS_fc_e, HAR_RS_fc_e, HAR_RSRK_fc_e, RGARCH_fc_e, ARMAGARCH_fc_e)
Rol_fc_list <- list(AR1_RV_fc_r, HAR_fc_r, HAR_AS_fc_r, HAR_RS_fc_r, HAR_RSRK_fc_r, RGARCH_fc_r, ARMAGARCH_fc_r)
DMresults_e = list()
DMresults_r = list()
for(i1 in seq(from = 1, to =  7)){
DMresults_e[[i1]] = list()
DMresults_r[[i1]] = list()
for(i2 in seq(from =  1, to = 7)){
DMresults_e[[i1]][[i2]] = list()
DMresults_r[[i1]][[i2]] = list()
if(i1 != i2){
for(stockn in stocks$stockname){
DMresults_e[[i1]][[i2]][[stockn]] = dm.test(abs(true_vals[[stockn]]-Exp_fc_list[[i1]][[stockn]]), abs(true_vals[[stockn]]-Exp_fc_list[[i2]][[stockn]]), alternative = "greater")$p.value
DMresults_r[[i1]][[i2]][[stockn]] = dm.test(abs(true_vals[[stockn]]-Rol_fc_list[[i1]][[stockn]]), abs(true_vals[[stockn]]-Rol_fc_list[[i2]][[stockn]]), alternative = "greater")$p.value
}
}
}
}
modelnames = c("AR(1)-RV", "HAR", "HAR-AS", "HAR-RSV", "HAR-RSRK", "RGARCH", "GARCH")
DM_output_e = data.frame(matrix(rep(NA, times = 49), ncol = 7))
DM_output_r = data.frame(matrix(rep(NA, times = 49), ncol = 7))
rownames(DM_output_e) = c("AR(1)-RV", "HAR", "HAR-AS", "HAR-RSV", "HAR-RSRK", "RGARCH", "GARCH")
colnames(DM_output_e) = c("AR(1)-RV", "HAR", "HAR-AS", "HAR-RSV", "HAR-RSRK", "RGARCH", "GARCH")
rownames(DM_output_r) = c("AR(1)-RV", "HAR", "HAR-AS", "HAR-RSV", "HAR-RSRK", "RGARCH", "GARCH")
colnames(DM_output_r) = c("AR(1)-RV", "HAR", "HAR-AS", "HAR-RSV", "HAR-RSRK", "RGARCH", "GARCH")
for(i1 in seq(from = 1, to =  7)){
for(i2 in seq(from =  1, to = 7)){
if(i1 != i2){
DM_output_e[i1,i2] = mean(unlist(DMresults_e[[i1]][[i2]]))
DM_output_r[i1,i2] = mean(unlist(DMresults_r[[i1]][[i2]]))
}
}
}
modelnames = c("AR(1)-RV","HAR","HAR-AS","HAR-RSV","HAR-RSRK","RGARCH","ARMAGARCH")
pdf(file = "Plots/DMpval.pdf", width = 16, height = 12)
par(mfrow = c(1,7))
for(i1 in seq(from = 1, to =7)){
modelselection = seq(from = 1, to = 7)[-i1]
#  print(modelselection)
DM_box_data_e = data.frame(matrix(rep(NA, times = 7*nrow(stocks)),
ncol = nrow(stocks)))
for(i2 in modelselection){
DM_box_data_e[i2,] = unlist(DMresults_e[[i1]][[i2]])
}
rownames(DM_box_data_e) = modelnames
par(bty = 'n')
boxplot(t(DM_box_data_e)[,modelselection], ylim = c(0,1),
main = modelnames[i1], xaxt = 'n', cex.main = 2, yaxt = 'n', bty = 'n')
abline(h = 0.05, col = "red", lwd = 4, lty = 2)
axis(1, at=1:6, labels=FALSE, xaxt ='n')
axis(2, at=seq(from = 0, to = 1, by = 0.05), labels=seq(from = 0, to = 1, by = 0.05), xaxt ='n')
# indent = 10^(round(log(mean(plotvar), base = 10))-2)*5
text(x=1:6, y=par("usr")[3]+0.025 , labels=modelnames[modelselection], srt=90, adj=1, xpd=TRUE, cex=1.5)
}
dev.off()
dev.off()
dev.off()
modelnames = c("AR(1)-RV","HAR","HAR-AS","HAR-RSV","HAR-RSRK","RGARCH","ARMAGARCH")
pdf(file = "Plots/DMpval.pdf", width = 16, height = 12)
modelnames = c("AR(1)-RV","HAR","HAR-AS","HAR-RSV","HAR-RSRK","RGARCH","ARMAGARCH")
pdf(file = "Plots/DMpval.pdf", width = 16, height = 12)
par(mfrow = c(1,7))
for(i1 in seq(from = 1, to =7)){
modelselection = seq(from = 1, to = 7)[-i1]
#  print(modelselection)
DM_box_data_e = data.frame(matrix(rep(NA, times = 7*nrow(stocks)),
ncol = nrow(stocks)))
for(i2 in modelselection){
DM_box_data_e[i2,] = unlist(DMresults_e[[i1]][[i2]])
}
rownames(DM_box_data_e) = modelnames
par(bty = 'n')
boxplot(t(DM_box_data_e)[,modelselection], ylim = c(0,1),
main = modelnames[i1], xaxt = 'n', cex.main = 2, yaxt = 'n', bty = 'n')
abline(h = 0.05, col = "red", lwd = 4, lty = 2)
abline(h = 0.95, col = "red", lwd = 4, lty = 2)
axis(1, at=1:6, labels=FALSE, xaxt ='n')
axis(2, at=seq(from = 0, to = 1, by = 0.05), labels=seq(from = 0, to = 1, by = 0.05), xaxt ='n')
# indent = 10^(round(log(mean(plotvar), base = 10))-2)*5
text(x=1:6, y=par("usr")[3]+0.025 , labels=modelnames[modelselection], srt=90, adj=1, xpd=TRUE, cex=1.5)
}
dev.off()
library(stringr)
library(arrow)
library(xts)
library(graphics)
library(RColorBrewer)
library(ggplot2)
library(tseries)
library(dplyr)
library(aod)
library(stargazer)
library(xtable)
library(stats)
library(zoo)
library(forecast)
library(rugarch)
library(xts)
library(highfrequency)
library(fitdistrplus)
library(MASS)
library(mosaic)
library(segMGarch)
library(GAS)
##############################
### READING FROM PARQUET   ###
###    Not necessary if    ###
### .RData files available ###
##############################
# #read all filenames
# stocks = as.data.frame(list.files("Data/parquet"))
# #create stock names from file names
# names(stocks) = "filename"
# stocks$stockname = substr(stocks$filename, 4, nchar(stocks$filename))
# # head(stocks)
# allstocks = list()
# for(i in seq(1,nrow(stocks))){
#  # read file
#  allstocks[[stocks[i,"stockname"]]] =as.xts(read_parquet(paste("Data/parquet/", stocks[i,"filename"], sep="")))
#  # print(sum(is.na(allstocks[[stocks[i,"stockname"]]])))
#  # check if No Na's are present
#  stocks$NoNas[i] = sum(is.na(allstocks[[stocks[i,"stockname"]]])) == 0
#  # compute returns
#  allstocks[[stocks[i,"stockname"]]]$ret = diff(allstocks[[stocks[i,"stockname"]]][,"close_price"])/lag(allstocks[[stocks[i,"stockname"]]][,"close_price"])
#  # reorganize  columns
#  allstocks[[stocks[i,"stockname"]]] = allstocks[[stocks[i,"stockname"]]][,c(7,2,3,4,5,6,1)]
#  allstocks[[stocks[i,"stockname"]]] = allstocks[[stocks[i,"stockname"]]][-1,]
#}
for(filename in setdiff(list.files("Data"), list.dirs("Data", recursive = FALSE, full.names = FALSE))){
load(paste("Data/", filename, sep = ""))
}
# Model parameters - loaded from data
# minimum_length = 1000
# pre_covid_end_date = as.Date("2019-05-24")
# n_for = 66
# max_possible_date_diff = 21
# forecast_start_date = as.Date("2019-05-24")
MSE_r_output = t(as.data.frame(MSE_r))
colnames(MSE_r_output)  <- c("AR(1)-RV", "HAR","HAR-AS", "HAR-RS", "HAR-RSRK", "RGARCH", "GARCH")
MSE_e_output = t(as.data.frame(MSE_e))
colnames(MSE_e_output)  <- c("AR(1)-RV", "HAR","HAR-AS", "HAR-RS", "HAR-RSRK", "RGARCH", "GARCH")
MAE_r_output = t(as.data.frame(MAE_r))
colnames(MAE_r_output)  <- c("AR(1)-RV", "HAR","HAR-AS", "HAR-RS", "HAR-RSRK", "RGARCH", "GARCH")
MAE_e_output = t(as.data.frame(MAE_e))
colnames(MAE_e_output)  <- c("AR(1)-RV", "HAR","HAR-AS", "HAR-RS", "HAR-RSRK", "RGARCH", "GARCH")
better_MSE = ifelse(MSE_r_output > MSE_e_output, "Expanding", "Rolling")
better_MAE = ifelse(MAE_r_output > MAE_e_output, "Expanding", "Rolling")
print(
xtable(
as.data.frame(
rbind(
colSums(better_MSE == "Rolling"),
colSums(better_MSE == "Expanding")
),
row.names = c("Rolling","Expanding")
),
caption = c("Better performing forecasting scheme for each model according to MSE",
"Better scheme MSE summary"),
label = "Table:Better_MSE_summary"
),
file = "Outputs/Better_MSE_summary.tex"
)
print(
xtable(
as.data.frame(
rbind(
colSums(better_MAE == "Rolling"),
colSums(better_MAE == "Expanding")
),
row.names = c("Rolling","Expanding")
),
caption = c("Better performing forecasting scheme for each model according to MAE",
"Better scheme MAE summary"),
label = "Table:Better_MAE_summary"
),
file = "Outputs/Better_MAE_summary.tex"
)
sd = as.data.frame(as.character(stocks$start_date),row.names = stocks$stockname)
ed = as.data.frame(as.character(stocks$end_date),row.names = stocks$stockname)
rest = as.data.frame(
stocks[,c(
which(names(stocks)=="obs"),
which(names(stocks)=="pre_covid_obs")
)],
row.names = stocks$stockname
)
overview = cbind(sd, ed, rest)
colnames(overview) = c("Start date","End date", "Observations", paste("Observations before",pre_covid_end_date))
overview_side = cbind(
rownames(  overview[seq(from = 1, to = nrow(overview)/2),]),
overview[seq(from = 1, to = nrow(overview)/2),],
rownames(overview[seq(from = nrow(overview)/2+1, to = nrow(overview)),]),
overview[seq(from = nrow(overview)/2+1, to = nrow(overview)),]
)
colnames(overview_side) = rep(c("Stock","Start","End date", "Obs", paste("Obs bef.",pre_covid_end_date)), times = 2)
print(
xtable(overview_side,
caption = c(paste("Overview of start date, end date, number of observations available and number of observations
in the training set", sep =""),
"Overview"),
label = "Table:Overview",
auto = TRUE
),
file = "Outputs/Overview.tex",
)
