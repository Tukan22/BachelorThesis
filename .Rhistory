#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_fc_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_fc_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ ARMAGARCH_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # Assuming t distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_fc_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_fc_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ ARMAGARCH_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # Assuming t distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ ARMAGARCH_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # Assuming t distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_fc_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
# Check how the VaR should be calculate
VaR95_ARMAGARCH_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ ARMAGARCH_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # Assuming t distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_fc_e[[stockn]], alpha = 0.05)
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_e[[stockn]], alpha = 0.05)
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ ARMAGARCH_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # Assuming t distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
lapply(allstocks)
lapply(allstocks, mean)
lapply(allstocks["ret"], mean)
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ ARMAGARCH_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # Assuming t distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ HAR_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # Assuming t distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ HAR_AS_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # Assuming t distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ HAR_RS_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # Assuming t distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
HAR_RSRK_fc_e[[stockn]]
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ HAR_RSRK_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # Assuming t distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ ARMAGARCH[[stockn]]*qt(p = 0.05, df = fit.df))  # Assuming t distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ ARMAGARCH_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # Assuming t distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ HAR_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # Assuming t distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ sqrt(HAR_fc_e[[stockn]])*qt(p = 0.05, df = fit.df))  # Assuming t distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ ARMAGARCH_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # Assuming t distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ ARMAGARCH_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # Assuming t distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ sqr(tARMAGARCH_fc_e[[stockn]])*qt(p = 0.05, df = fit.df))  # Assuming t distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ sqrt(ARMAGARCH_fc_e[[stockn]])*qt(p = 0.05, df = fit.df))  # Assuming t distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
for(stockn in stocks$stockname){
#  VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)      # Assuming normal distribution
#                                     + AR1_RV_fc_e_er[[stockn]]*qnorm(0.05, mean = 0, sd = 1))  # TODO assuming normal distribution
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
# print(stockn)
result <- tryCatch({
# x=as.xts(AR1_RV_fc_e[[stockn]])     ################# TODO: Here is the error, the distribution should be fitting the returns!
x=as.xts(allstocks[[stockn]]$ret)
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
fit.df = fit.t[3]
# Check how the VaR should be calculate
VaR95_ARMAGARCH_e[[stockn]]  = as.xts(mean(allstocks[[stockn]]$ret)        # Maybe only until the start of estimation?
+ ARMAGARCH_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # Assuming t distribution
#     VaR95_AR1_RV_e[[stockn]]  = as.xts(mean(retstouse)        # Assuming t distribution
#                                        + AR1_RV_fc_e[[stockn]]*qt(p = 0.05, df = fit.df))  # TODO assuming normal distribution
BackTest = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_e[[stockn]], alpha = 0.05)
#    print("OK")
}, error = function(e) {
print(paste(stockn, "Error"))
})
print(paste(stockn,":  ",unname(BackTest$LRuc["Pvalue"]) ,sep=""))
}
allstocks[[]]
allstocks[[]]$ret
allstocks[[stocks$stockname]]
allstocks[[stockn]]
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
retstouse = allstocks[[stockn]]$ret[which(
(index(allstocks[[stockn]])>=as.Date("2019-12-03"))   # TODO: Generalize this for any date
&(index(allstocks[[stockn]])<=as.Date("2020-03-09")))] # TODO: Generalize this for any date
sum(retstouse < VaR95_AR1_RV_e[[stockn]]) / nrow(VaR95_AR1_RV_e[[stockn]])
mean(allstocks[[stockn]]$ret)
mean(VaR95_AR1_RV_e[[stockn]])
