Backtests_HAR_r[[stockn]] = BacktestVaR(data = retstouse, VaR = VaR95_HAR_r[[stockn]], alpha = VaRalpha)
Backtests_HAR_AS_e[[stockn]] = BacktestVaR(data = retstouse, VaR = VaR95_HAR_AS_e[[stockn]], alpha = VaRalpha)
Backtests_HAR_AS_r[[stockn]] = BacktestVaR(data = retstouse, VaR = VaR95_HAR_AS_r[[stockn]], alpha = VaRalpha)
Backtests_HAR_RS_e[[stockn]] = BacktestVaR(data = retstouse, VaR = VaR95_HAR_RS_e[[stockn]], alpha = VaRalpha)
Backtests_HAR_RS_r[[stockn]] = BacktestVaR(data = retstouse, VaR = VaR95_HAR_RS_r[[stockn]], alpha = VaRalpha)
Backtests_HAR_RSRK_e[[stockn]] = BacktestVaR(data = retstouse, VaR = VaR95_HAR_RSRK_e[[stockn]], alpha = VaRalpha)
Backtests_HAR_RSRK_r[[stockn]] = BacktestVaR(data = retstouse, VaR = VaR95_HAR_RSRK_r[[stockn]], alpha = VaRalpha)
Backtests_RGARCH_e[[stockn]] = BacktestVaR(data = retstouse, VaR = VaR95_RGARCH_e[[stockn]], alpha = VaRalpha)
Backtests_RGARCH_r[[stockn]] = BacktestVaR(data = retstouse, VaR = VaR95_RGARCH_r[[stockn]], alpha = VaRalpha)
Backtests_ARMAGARCH_e[[stockn]] = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_e[[stockn]], alpha = VaRalpha)
Backtests_ARMAGARCH_r[[stockn]] = BacktestVaR(data = retstouse, VaR = VaR95_ARMAGARCH_r[[stockn]], alpha = VaRalpha)
#  }
# Kupiec test p-values
Kupieccolname = paste((1-VaRalpha)*100,"% Kup.", sep = "")
VaRresults[[stockn]][Kupieccolname] =  c(
unname(Backtests_AR1_RV_e[[stockn]]$LRuc[2]),
unname(Backtests_AR1_RV_r[[stockn]]$LRuc[2]),
unname(Backtests_HAR_e[[stockn]]$LRuc[2]),
unname(Backtests_HAR_r[[stockn]]$LRuc[2]),
unname(Backtests_HAR_AS_e[[stockn]]$LRuc[2]),
unname(Backtests_HAR_AS_r[[stockn]]$LRuc[2]),
unname(Backtests_HAR_RS_e[[stockn]]$LRuc[2]),
unname(Backtests_HAR_RS_r[[stockn]]$LRuc[2]),
unname(Backtests_HAR_RSRK_e[[stockn]]$LRuc[2]),
unname(Backtests_HAR_RSRK_r[[stockn]]$LRuc[2]),
unname(Backtests_RGARCH_e[[stockn]]$LRuc[2]),
unname(Backtests_RGARCH_r[[stockn]]$LRuc[2]),
unname(Backtests_ARMAGARCH_e[[stockn]]$LRuc[2]),
unname(Backtests_ARMAGARCH_r[[stockn]]$LRuc[2])
)
Christoffersencolname = paste((1-VaRalpha)*100,"% Chr.", sep = "")
VaRresults[[stockn]][Christoffersencolname] =  c(
unname(Backtests_AR1_RV_e[[stockn]]$LRcc[2]),
unname(Backtests_AR1_RV_r[[stockn]]$LRcc[2]),
unname(Backtests_HAR_e[[stockn]]$LRcc[2]),
unname(Backtests_HAR_r[[stockn]]$LRcc[2]),
unname(Backtests_HAR_AS_e[[stockn]]$LRcc[2]),
unname(Backtests_HAR_AS_r[[stockn]]$LRcc[2]),
unname(Backtests_HAR_RS_e[[stockn]]$LRcc[2]),
unname(Backtests_HAR_RS_r[[stockn]]$LRcc[2]),
unname(Backtests_HAR_RSRK_e[[stockn]]$LRcc[2]),
unname(Backtests_HAR_RSRK_r[[stockn]]$LRcc[2]),
unname(Backtests_RGARCH_e[[stockn]]$LRcc[2]),
unname(Backtests_RGARCH_r[[stockn]]$LRcc[2]),
unname(Backtests_ARMAGARCH_e[[stockn]]$LRcc[2]),
unname(Backtests_ARMAGARCH_r[[stockn]]$LRcc[2])
)
DQcolname = paste((1-VaRalpha)*100,"% DQ", sep = "")
VaRresults[[stockn]][DQcolname] =  c(
unname(as.numeric(Backtests_AR1_RV_e[[stockn]]$DQ[[2]])),
unname(as.numeric(Backtests_AR1_RV_r[[stockn]]$DQ[[2]])),
unname(as.numeric(Backtests_HAR_e[[stockn]]$DQ[[2]])),
unname(as.numeric(Backtests_HAR_r[[stockn]]$DQ[[2]])),
unname(as.numeric(Backtests_HAR_AS_e[[stockn]]$DQ[[2]])),
unname(as.numeric(Backtests_HAR_AS_r[[stockn]]$DQ[[2]])),
unname(as.numeric(Backtests_HAR_RS_e[[stockn]]$DQ[[2]])),
unname(as.numeric(Backtests_HAR_RS_r[[stockn]]$DQ[[2]])),
unname(as.numeric(Backtests_HAR_RSRK_e[[stockn]]$DQ[[2]])),
unname(as.numeric(Backtests_HAR_RSRK_r[[stockn]]$DQ[[2]])),
unname(as.numeric(Backtests_RGARCH_e[[stockn]]$DQ[[2]])),
unname(as.numeric(Backtests_RGARCH_r[[stockn]]$DQ[[2]])),
unname(as.numeric(Backtests_ARMAGARCH_e[[stockn]]$DQ[[2]])),
unname(as.numeric(Backtests_ARMAGARCH_r[[stockn]]$DQ[[2]]))
)
Perccolname = paste((1-VaRalpha)*100,"% Hit rate", sep = "")
# Percentage returns outside of the alpha-% VaR
VaRresults[[stockn]][Perccolname] = c(
sum(retstouse < VaR95_AR1_RV_e[[stockn]])/nrow(retstouse),
sum(retstouse < VaR95_AR1_RV_r[[stockn]])/nrow(retstouse),
sum(retstouse < VaR95_HAR_e[[stockn]])/nrow(retstouse),
sum(retstouse < VaR95_HAR_r[[stockn]])/nrow(retstouse),
sum(retstouse < VaR95_HAR_AS_e[[stockn]])/nrow(retstouse),
sum(retstouse < VaR95_HAR_AS_r[[stockn]])/nrow(retstouse),
sum(retstouse < VaR95_HAR_RS_e[[stockn]])/nrow(retstouse),
sum(retstouse < VaR95_HAR_RS_r[[stockn]])/nrow(retstouse),
sum(retstouse < VaR95_HAR_RSRK_e[[stockn]])/nrow(retstouse),
sum(retstouse < VaR95_HAR_RSRK_r[[stockn]])/nrow(retstouse),
sum(retstouse < VaR95_RGARCH_e[[stockn]])/nrow(retstouse),
sum(retstouse < VaR95_RGARCH_r[[stockn]])/nrow(retstouse),
sum(retstouse < VaR95_ARMAGARCH_e[[stockn]])/nrow(retstouse),
sum(retstouse < VaR95_ARMAGARCH_r[[stockn]])/nrow(retstouse)
)
counter = counter + 1
}
VaRresults_df = data.frame(
matrix(
unlist(lapply(VaRresults, FUN = function(x){x[2]})),
ncol = 14
)
)
end_time = Sys.time()
# print(end_time-start_time)
#  return(VaRresults_output)
return(VaRresults)
}
VaRresults = list()
Backtests = list()
MeanVarValues_2 = data.frame(matrix(rep(NA, times = 14), ncol = 1))
for(VaRalpha in c(0.1, 0.05, 0.01)){
VaRresults_output = VaR(VaRalpha)
meanVaRvalues = data.frame(matrix(rep(NA, times = 4*14), ncol = 4))
for(model in seq(from = 1, to = 14, by = 1)){
for(col in seq(from = 2, to = 5, step = 1)){
meanVaRvalues[model, col-1] =
mean(unlist(lapply(VaRresults_output, FUN = function(x){
lapply(x[col],  FUN = function(y){y[model]})
})))
}
}
lapply(
VaRresults_output, FUN = function(x){
lapply(x[col],  FUN = function(y){y[model]})
})
lapply(VaRresults_output[["XOM"]][col],  FUN = function(y){y[model]})
colnames(meanVaRvalues) = colnames(VaRresults_output[[1]])[2:5]
rownames(meanVaRvalues) = c("AR(1)-RV expanding", "AR(1)-RV rolling", "HAR expanding", "HAR rolling",
"HAR-AS expanding", "HAR-AS rolling", "HAR-RSV expanding", "HAR-RSV rolling",
"HAR-RSRK expanding", "HAR-RSRK rolling", "RGARCH expanding", "RGARCH rolling",
"GARCH expanding", "GARCH rolling")
MeanVarValues_2 = cbind(MeanVarValues_2, meanVaRvalues)
}
MeanVarValues_2 = MeanVarValues_2[-1]
varorders = round(apply(MeanVarValues_2, MARGIN = 2, FUN = rank))
varmeans_text = apply(MeanVarValues_2, MARGIN = 2, FUN = function(x){sprintf("%.5f", x)} )
varorders_text = t(apply(varorders, MARGIN = 1, FUN = as.character))
var_means_order_text = matrix(paste(matrix(varmeans_text), " (", varorders_text, ")", sep = ""), nrow = nrow(varmeans_text))
colnames(var_means_order_text) = colnames(varorders)
rownames(var_means_order_text) = rownames(varorders)
print(
xtable(
var_means_order_text[,c(1,5,9)],
caption = c("This table shows the means of Kupiec's test p-values for each model and forecasting window for each respective VaR level. In parentheses is the rank of the value across all models. ",
"Kupiec's test means"),
label = "Table:VaR_means_Kupiec",
digits = 5
),
file = "Outputs/VaR_means_Kupiec.tex"
)
print(
xtable(
var_means_order_text[,c(2,6,10)],
caption = c("This table shows the means of Christoffersen's test p-values for each model and forecasting window for each respective VaR level. In parentheses is the rank of the value across all models. ",
"Christoffersen's test means"),
label = "Table:VaR_means_Christoffersen",
digits = 5
),
file = "Outputs/VaR_means_Christoffersen.tex"
)
print(
xtable(
var_means_order_text[,c(3,7,11)],
caption = c("This table shows the means of Dynamic quantile test p-values for each model and forecasting window for each respective VaR level. In parentheses is the rank of the value across all models. ",
"DQ test means"),
label = "Table:VaR_means_DQ",
digits = 5
),
file = "Outputs/VaR_means_DQ.tex"
)
print(
xtable(
var_means_order_text[,c(4,8,12)],
caption = c("This table shows the means of hit rate for each model and forecasting window for each respective VaR level. In parentheses is the rank of the value across all models. ",
"Hit ratio means"),
label = "Table:VaR_means_HitRate",
digits = 5
),
file = "Outputs/VaR_means_HitRate.tex"
)
mincer_p_vals =
t(
as.data.frame(
lapply(mincer, FUN = function(x) {#paste(
#        round(x[,1], digits = 2),
#        round(x[,2], digits = 2),
#        round(x[,3], digits = 2),
x[,4]
#        )
})))
mincer_p_vals_e = mincer_p_vals[,c(1,3,5,7,9,11,13)]
mincer_p_vals_r = mincer_p_vals[,c(2,4,6,8,10,12,14)]
colnames(mincer_p_vals_e) = c("AR(1)-RV", "HAR", "HAR-AS", "HAR-RSV", "HAR-RSRK", "RGARCH", "GARCH")
colnames(mincer_p_vals_r) = c("AR(1)-RV", "HAR", "HAR-AS", "HAR-RSV", "HAR-RSRK", "RGARCH", "GARCH")
mincer_p_vals_summary = t(
rbind(
apply(mincer_p_vals, MARGIN = 2, FUN = mean),
apply(mincer_p_vals, MARGIN = 2, FUN = sd),
apply(mincer_p_vals, MARGIN = 2, FUN = function(x){sum(x<0.05)})/nrow(mincer_p_vals)
)
)
colnames(mincer_p_vals_summary) = c("Mean", "StdDev", "% p-vals <0.05")
rownames(mincer_p_vals_summary) = rownames(mincer[[1]])
mincer_p_vals_summary
mincer
regressions = list()
Minc_AR1_RV_e = list()
Minc_AR1_RV_r = list()
Minc_HAR_e = list()
Minc_HAR_r = list()
Minc_HAR_AS_e = list()
Minc_HAR_AS_r = list()
Minc_HAR_RS_e = list()
Minc_HAR_RS_r = list()
Minc_HAR_RSRK_e = list()
Minc_HAR_RSRK_r = list()
Minc_RGARCH_e = list()
Minc_RGARCH_r = list()
Minc_ARMAGARCH_e = list()
Minc_ARMAGARCH_r = list()
mincer = list()
# Function for a better working with wald test
wald_test <- function(lm) {
wald <- wald.test(b = coef(lm), Sigma = vcov(lm), H0 = c(0, 1), Terms = 1:2)
coefs <- coef(lm)
return(c(coefs, wald$result$chi2[1], round(wald$result$chi2[3], 2)))
}
# Compute MZ-regressions for all all forecasts
counter = 1
for(stockn in stocks$stockname){
print(counter)
regressions[[stockn]] <- list(
Minc_AR1_RV_e[[stockn]] <- lm(true_vals[[stockn]] ~ AR1_RV_fc_e[[stockn]]),
Minc_AR1_RV_r[[stockn]] <- lm(true_vals[[stockn]] ~ AR1_RV_fc_r[[stockn]]),
Minc_HAR_e[[stockn]] <- lm(true_vals[[stockn]] ~ HAR_fc_e[[stockn]]),
Minc_HAR_r[[stockn]] <- lm(true_vals[[stockn]] ~ HAR_fc_r[[stockn]]),
Minc_HAR_AS_e[[stockn]] <- lm(true_vals[[stockn]] ~ HAR_AS_fc_e[[stockn]]),
Minc_HAR_AS_r[[stockn]] <- lm(true_vals[[stockn]] ~ HAR_AS_fc_r[[stockn]]),
Minc_HAR_RS_e[[stockn]] <- lm(true_vals[[stockn]] ~ HAR_RS_fc_e[[stockn]]),
Minc_HAR_RS_r[[stockn]] <- lm(true_vals[[stockn]] ~ HAR_RS_fc_r[[stockn]]),
Minc_HAR_RSRK_e[[stockn]] <- lm(true_vals[[stockn]] ~ HAR_RSRK_fc_e[[stockn]]),
Minc_HAR_RSRK_r[[stockn]] <- lm(true_vals[[stockn]] ~ HAR_RSRK_fc_r[[stockn]]),
Minc_RGARCH_e[[stockn]] <- lm(true_vals[[stockn]] ~  RGARCH_fc_e[[stockn]]),
Minc_RGARCH_r[[stockn]] <- lm(true_vals[[stockn]] ~ RGARCH_fc_r[[stockn]]),
Minc_ARMAGARCH_e[[stockn]] <- lm(true_vals[[stockn]] ~ ARMAGARCH_fc_e[[stockn]]),
Minc_ARMAGARCH_r[[stockn]] <- lm(true_vals[[stockn]] ~ ARMAGARCH_fc_r[[stockn]])
)
mincer[[stockn]] <- as.data.frame(matrix(rep(NA, 5 * 14), ncol = 5))
rownames(mincer[[stockn]]) <- c("AR(1)-RV Expanding", "AR(1)-RV Rolling", "HAR Expanding", "HAR Rolling",
"HAR-AS Expanding" ,"HAR-AS Rolling","HAR-RSV Expanding", "HAR-RSV Rolling",
"HAR-RSRK Expanding", "HAR-RSRK Rolling", "Realized GARCH Expanding", "Realized GARCH Rolling",
"ARMA-GARCH Expanding", "ARMA-GARCH Rolling")
colnames(mincer[[stockn]]) <- c("Intercept", "Slope", "Statistic", "p-value", "R Squared")
for (i in 1:length(regressions[[stockn]])) {
mincer[[stockn]][i, ] <- c(wald_test(regressions[[stockn]][[i]]), summary(regressions[[stockn]][[i]])$r.squared)
}
counter = counter + 1
}
mincer_p_vals =
t(
as.data.frame(
lapply(mincer, FUN = function(x) {#paste(
#        round(x[,1], digits = 2),
#        round(x[,2], digits = 2),
#        round(x[,3], digits = 2),
x[,4]
#        )
})))
mincer_p_vals_e = mincer_p_vals[,c(1,3,5,7,9,11,13)]
mincer_p_vals_r = mincer_p_vals[,c(2,4,6,8,10,12,14)]
colnames(mincer_p_vals_e) = c("AR(1)-RV", "HAR", "HAR-AS", "HAR-RSV", "HAR-RSRK", "RGARCH", "GARCH")
colnames(mincer_p_vals_r) = c("AR(1)-RV", "HAR", "HAR-AS", "HAR-RSV", "HAR-RSRK", "RGARCH", "GARCH")
mincer_p_vals_summary = t(
rbind(
apply(mincer_p_vals, MARGIN = 2, FUN = mean),
apply(mincer_p_vals, MARGIN = 2, FUN = sd),
apply(mincer_p_vals, MARGIN = 2, FUN = function(x){sum(x<0.05)})/nrow(mincer_p_vals)
)
)
colnames(mincer_p_vals_summary) = c("Mean", "StdDev", "% p-vals <0.05")
rownames(mincer_p_vals_summary) = rownames(mincer[[1]])
mincer_p_vals_summary
mincer_p_vals
mincer_p_vals
mincer_p_vals
mincer_p_vals_summary
print(
xtable(
mincer_p_vals_summary,
caption = c("This table shows the means and stddevs of Mincer-Zarnowitz p-values, as well as the ratio of cases in which the t-value is lower than 0.05 (i. e. the ratio of biased tests). ",
"Mincer-Zarnowitz p-values"),
label = "Table:MZpvals",
digits = 5
),
file = "Outputs/MZpvals.tex"
)
save(stocks, file = "Data/stocks.Rdata")
save(allstocks, file = "Data/allstocks.Rdata")
save(HARmeasures, file = "Data/HARmeasures.Rdata")
save(AR1_RV_fit, file = "Data/AR1_RV_fit.Rdata")
save(ARMAGARCH_fit, file = "Data/ARMAGARCH_fit.Rdata")
save(HAR_fit, file = "Data/HAR_fit.Rdata")
save(HARAS_fit, file = "Data/HARAS_fit.Rdata")
save(HARS_fit, file = "Data/HARS_fit.Rdata")
save(HARSK_fit, file = "Data/HARSK_fit.Rdata")
save(RGARCH_fit, file = "Data/RGARCH_fit.Rdata")
save(RGARCH, file = "Data/RGARCH.Rdata")
save(ARMAGARCH, file = "Data/ARMAGARCH.Rdata")
save(pre_covid_end_date, file = "Data/pre_covid_end_date.Rdata")
save(forecast_start_date, file = "Data/forecast_start_date.Rdata")
save(minimum_length, file = "Data/minimum_length.Rdata")
save(n_for, file = "Data/n_for.Rdata")
save(max_possible_date_diff, file = "Data/max_possible_date_diff.Rdata")
save(stocks, file = "Data/stocks.Rdata")
save(allstocks, file = "Data/allstocks.Rdata")
save(HARmeasures, file = "Data/HARmeasures.Rdata")
save(data_aux, file = "Data/data_aux.Rdata")
save(TT, file = "Data/TT.Rdata")
save(RV_5, file = "Data/RV_5.Rdata")
save(RV_22, file = "Data/RV_22.Rdata")
save(T_5, file = "Data/T_5.Rdata")
save(T_22, file = "Data/T_22.Rdata")
save(HAR_DATA, file = "Data/HAR_DATA.Rdata")
save(true_vals, file = "Data/true_vals.Rdata")
save(AR1_RV_fc_r, file = "Data/AR1_RV_fc_r.Rdata")
save(AR1_RV_fc_e, file = "Data/AR1_RV_fc_e.Rdata")
save(HAR_fc_r, file = "Data/HAR_fc_r.Rdata")
save(HAR_fc_e, file = "Data/HAR_fc_e.Rdata")
save(ARMAGARCH_fc_r, file = "Data/ARMAGARCH_fc_r.Rdata")
save(ARMAGARCH_fc_e, file = "Data/ARMAGARCH_fc_e.Rdata")
save(RGARCH_fc_r, file = "Data/RGARCH_fc_r.Rdata")   # TODO: Save
save(RGARCH_fc_e, file = "Data/RGARCH_fc_e.Rdata")   # TODO: Save
save(HAR_AS_fc_r, file = "Data/HAR_AS_fc_r.Rdata")
save(HAR_AS_fc_e, file = "Data/HAR_AS_fc_e.Rdata")
save(HAR_RS_fc_r, file = "Data/HAR_RS_fc_r.Rdata")
save(HAR_RS_fc_e, file = "Data/HAR_RS_fc_e.Rdata")
save(HAR_RSRK_fc_r, file = "Data/HAR_RSRK_fc_r.Rdata")
save(HAR_RSRK_fc_e, file = "Data/HAR_RSRK_fc_e.Rdata")
save(AR1_RV_fc_e_er, file = "Data/AR1_RV_fc_e_er.Rdata")
save(AR1_RV_fc_r_er, file = "Data/AR1_RV_fc_r_er.Rdata")
save(HAR_fc_e_er, file = "Data/HAR_fc_e_er.Rdata")
save(HAR_fc_r_er, file = "Data/HAR_fc_r_er.Rdata")
save(HAR_AS_fc_e_er, file = "Data/HAR_AS_fc_e_er.Rdata")
save(HAR_AS_fc_r_er, file = "Data/HAR_AS_fc_r_er.Rdata")
save(HAR_RSV_fc_e_er, file = "Data/HAR_RSV_fc_e_er.Rdata")
save(HAR_RSV_fc_r_er, file = "Data/HAR_RSV_fc_r_er.Rdata")
save(HAR_RSRK_fc_e_er, file = "Data/HAR_RSRK_fc_e_er.Rdata")
save(HAR_RSRK_fc_r_er, file = "Data/HAR_RSRK_fc_r_er.Rdata")
save(RGARCH_fc_e_er, file = "Data/RGARCH_fc_e_er.Rdata")
save(RGARCH_fc_r_er, file = "Data/RGARCH_fc_r_er.Rdata")
save(ARMAGARCH_fc_e_er, file = "Data/ARMAGARCH_fc_e_er.Rdata")
save(ARMAGARCH_fc_r_er, file = "Data/ARMAGARCH_fc_r_er.Rdata")
save(errs, file = "Data/errs.Rdata")
save(MSE_e, file = "Data/MSE_e.Rdata")
save(MSE_r, file = "Data/MSE_r.Rdata")
save(MSEs, file = "Data/MSEs.Rdata")
save(MAE_e, file = "Data/MAE_e.Rdata")
save(MAE_r, file = "Data/MAE_r.Rdata")
save(MAEs, file = "Data/MAEs.Rdata")
save(Exp_comb , file = "Data/Exp_comb.Rdata")
save(Roll_comb, file = "Data/Roll_comb.Rdata")
save(Diebold_e, file = "Data/Diebold_e.Rdata")
save(Diebold_r, file = "Data/Diebold_r.Rdata")
save(regressions , file = "Data/regressions.Rdata")
save(Minc_AR1_RV_e , file = "Data/Minc_AR1_RV_e.Rdata")
save(Minc_AR1_RV_r , file = "Data/Minc_AR1_RV_r .Rdata")
save(Minc_HAR_e , file = "Data/Minc_HAR_e.Rdata")
save(Minc_HAR_r , file = "Data/Minc_HAR_r.Rdata")
save(Minc_HAR_AS_e , file = "Data/Minc_HAR_AS_e.Rdata")
save(Minc_HAR_AS_r , file = "Data/Minc_HAR_AS_r.Rdata")
save(Minc_HAR_RS_e , file = "Data/Minc_HAR_RS_e.Rdata")
save(Minc_HAR_RS_r , file = "Data/Minc_HAR_RS_r.Rdata")
save(Minc_HAR_RSRK_e , file = "Data/Minc_HAR_RSRK_e.Rdata")
save(Minc_HAR_RSRK_r , file = "Data/Minc_HAR_RSRK_r.Rdata")
save(Minc_RGARCH_e , file = "Data/Minc_RGARCH_e.Rdata")
save(Minc_RGARCH_r , file = "Data/Minc_RGARCH_r.Rdata")
save(Minc_ARMAGARCH_e , file = "Data/Minc_ARMAGARCH_e.Rdata")
save(Minc_ARMAGARCH_r , file = "Data/Minc_ARMAGARCH_r.Rdata")
save(mincer , file = "Data/mincer.Rdata")
save(VaR95_AR1_RV_e, file = "Data/VaR95_AR1_RV_e.Rdata")
save(VaR95_AR1_RV_r, file = "Data/VaR95_AR1_RV_r.Rdata")
save(VaR95_HAR_e, file = "Data/VaR95_HAR_e.Rdata")
save(VaR95_HAR_r, file = "Data/VaR95_HAR_r.Rdata")
save(VaR95_HAR_AS_e, file = "Data/VaR95_HAR_AS_e.Rdata")
save(VaR95_HAR_AS_r, file = "Data/VaR95_HAR_AS_r.Rdata")
save(VaR95_HAR_RSV_e, file = "Data/VaR95_HAR_RSV_e.Rdata")
save(VaR95_HAR_RSV_r, file = "Data/VaR95_HAR_RSV_r.Rdata")
save(VaR95_HAR_RSRK_e, file = "Data/VaR95_HAR_RSRK_e.Rdata")
save(VaR95_HAR_RSRK_r, file = "Data/VaR95_HAR_RSRK_r.Rdata")
save(VaR95_RGARCH_e, file = "Data/VaR95_RGARCH_e.Rdata")
save(VaR95_RGARCH_r, file = "Data/VaR95_RGARCH_r.Rdata")
save(VaR95_ARMAGARCH_e, file = "Data/VaR95_ARMAGARCH_e.Rdata")
save(VaR95_ARMAGARCH_r, file = "Data/VaR95_ARMAGARCH_r.Rdata")
save(Backtests_AR1_RV_e, file = "Data/Backtests_AR1_RV_e.Rdata")
save(Backtests_AR1_RV_r, file = "Data/Backtests_AR1_RV_r.Rdata")
save(Backtests_HAR_e, file = "Data/Backtests_HAR_e.Rdata")
save(Backtests_HAR_r, file = "Data/Backtests_HAR_r.Rdata")
save(Backtests_HAR_AS_e, file = "Data/Backtests_HAR_AS_e.Rdata")
save(Backtests_HAR_AS_r, file = "Data/Backtests_HAR_AS_r.Rdata")
save(Backtests_HAR_RS_e, file = "Data/Backtests_HAR_RS_e.Rdata")
save(Backtests_HAR_RS_r, file = "Data/Backtests_HAR_RS_r.Rdata")
save(Backtests_HAR_RSRK_e, file = "Data/Backtests_HAR_RSRK_e.Rdata")
save(Backtests_HAR_RSRK_r, file = "Data/Backtests_HAR_RSRK_r.Rdata")
save(Backtests_RGARCH_e, file = "Data/Backtests_RGARCH_e.Rdata")
save(Backtests_RGARCH_r, file = "Data/Backtests_RGARCH_r.Rdata")
save(Backtests_ARMAGARCH_e, file = "Data/Backtests_ARMAGARCH_e.Rdata")
save(Backtests_ARMAGARCH_r, file = "Data/Backtests_ARMAGARCH_r.Rdata")
save(wald_test, file = "Data/wald_test.Rdata")
save(VaRresults, file = "Data/Varresults")
save(MeanVarValues_2, file = "Data/MeanVarValues_2")
save(MSE_e, file = "Data/MSE_e")
save(MSE_r, file = "Data/MSE_r")
save(MAE_e, file = "Data/MAE_e")
save(MAE_r, file = "Data/MAE_r")
lapply(allstocks, FUN = function(x){x$ret})
library(stringr)
library(arrow)
library(xts)
library(graphics)
library(RColorBrewer)
library(ggplot2)
library(tseries)
library(dplyr)
library(aod)
library(stargazer)
library(xtable)
library(stats)
library(zoo)
library(forecast)
library(rugarch)
library(xts)
library(highfrequency)
library(fitdistrplus)
library(MASS)
library(mosaic)
library(segMGarch)
library(GAS)
##############################
### READING FROM PARQUET   ###
###    Not necessary if    ###
### .RData files available ###
##############################
# #read all filenames
# stocks = as.data.frame(list.files("Data/parquet"))
# #create stock names from file names
# names(stocks) = "filename"
# stocks$stockname = substr(stocks$filename, 4, nchar(stocks$filename))
# # head(stocks)
# allstocks = list()
# for(i in seq(1,nrow(stocks))){
#  # read file
#  allstocks[[stocks[i,"stockname"]]] =as.xts(read_parquet(paste("Data/parquet/", stocks[i,"filename"], sep="")))
#  # print(sum(is.na(allstocks[[stocks[i,"stockname"]]])))
#  # check if No Na's are present
#  stocks$NoNas[i] = sum(is.na(allstocks[[stocks[i,"stockname"]]])) == 0
#  # compute returns
#  allstocks[[stocks[i,"stockname"]]]$ret = diff(allstocks[[stocks[i,"stockname"]]][,"close_price"])/lag(allstocks[[stocks[i,"stockname"]]][,"close_price"])
#  # reorganize  columns
#  allstocks[[stocks[i,"stockname"]]] = allstocks[[stocks[i,"stockname"]]][,c(7,2,3,4,5,6,1)]
#  allstocks[[stocks[i,"stockname"]]] = allstocks[[stocks[i,"stockname"]]][-1,]
#}
for(filename in setdiff(list.files("Data"), list.dirs("Data", recursive = FALSE, full.names = FALSE))){
load(paste("Data/", filename, sep = ""))
}
# Model parameters - loaded from data
# minimum_length = 1000
# pre_covid_end_date = as.Date("2019-05-24")
# n_for = 66
# max_possible_date_diff = 21
# forecast_start_date = as.Date("2019-05-24")
lapply(allstocks, FUN = function(x){x$ret})
lapply(allstocks, FUN = function(x){mean(x$ret)})
unlist(lapply(allstocks, FUN = function(x){mean(x$ret)}))
hist(unlist(lapply(allstocks, FUN = function(x){mean(x$ret)})) )
tquantile*(AR1_RV_fc_r[[stockn]])
# Fit the returns to t-distribution, i. e. find the right number of degrees of freedom.
fit.t = fitdistr(
x = x*1000,
densfun = "t",
start = list(m=mean(x),s=sd(x), df=stocks$t_df_start[which(stocks$stockname == stockn)]),
lower=c(-1, 0.001,0.01))$estimate/c(1000,1000,1)
VaR95_AR1_RV_r
lapply(allstocks, FUN = function(x){mean(x$ret)})
lapply(VaR95_RGARCH_e, FUN = mean})
lapply(VaR95_RGARCH_e, FUN = mean)
log(lapply(VaR95_RGARCH_e, FUN = mean) , 10)
log(lapply(VaR95_RGARCH_e, FUN = mean), base  = 10)
log(unlist(lapply(VaR95_RGARCH_e, FUN = mean)), base  =10)
unlist(lapply(VaR95_RGARCH_e, FUN = mean))
abs(unlist(lapply(VaR95_RGARCH_e, FUN = mean)) )
log(
abs(
unlist(
lapply(
VaR95_RGARCH_e, FUN = mean
)
)
),
base = 10 )
lapply(allstocks, FUN = function(x){mean(x$ret)})
abs(unlist(lapply(allstocks, FUN = function(x){mean(x$ret)}) ) )
log(abs(unlist(lapply(allstocks, FUN = function(x){mean(x$ret)}) ) )  , base = 10 )
plot(log(abs(unlist(lapply(allstocks, FUN = function(x){mean(x$ret)}) ) )  , base = 10 ) )
lines(log(
abs(
unlist(
lapply(
VaR95_RGARCH_e, FUN = mean
)
)
),
base = 10 )
, col = "red")
plot(log(abs(unlist(lapply(allstocks, FUN = function(x){mean(x$ret)}) ) )  , base = 10 ) , , ylim = c(-4,0))
lines(log(
abs(
unlist(
lapply(
VaR95_RGARCH_e, FUN = mean
)
)
),
base = 10 )
, col = "red")
